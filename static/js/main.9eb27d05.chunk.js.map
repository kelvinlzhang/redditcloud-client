{"version":3,"sources":["sketch.js","chartComponents/Chart.js","ChartContainer.js","P5Wrapper.js","App.js","index.js"],"names":["sketch","props","p","cloud","ih","colorBaseOptions","scalar","fontSize","minFontSize","spawnBoxSize","maxWords","colorMinOffset","colorMaxOffset","wordCloud","wordDict","Object","classCallCheck","this","wordBoxes","boundaries","Rectangle","width","height","baseColor","Math","floor","random","length","maxFreq","_arr","entries","_i","_ref5","_ref2","slicedToArray","freq","minFreq","sortable","sort","a","b","slice","count","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_ref6","value","_ref4","word","isBiggest","push","wordBox","getProceduralColor","err","return","createClass","key","i","render","j","handleCollision","move","handleBoundary","colorBase","min","max","color","procColorHelper","red","green","blue","val","temp","text","map","textSize","randX","randY","rect","textWidth","yOffset","fill","x","y","other","bound","w","h","midX","midY","vx","vy","collides","biggestScale","dx","dy","constvx","force","constvy","areaScale1","pow","area","areaScale2","clampAbs","centerX","centerY","fX","fY","InputHandler","attachedBox","xOffset","clickX","clickY","isPressed","clickThreshold","contains","mouseX","mouseY","mouseClicked","console","log","updateSentimentChart","input","document","getElementById","getOwnPropertyDescriptor","window","HTMLInputElement","prototype","set","call","ev","Event","bubbles","dispatchEvent","setup","createCanvas","textAlign","LEFT","TOP","textLeading","dict","draw","background","handleCollisions","handleAttachedBox","mousePressed","mouseReleased","Chart","_this","possibleConstructorReturn","getPrototypeOf","state","chartData","react_default","createElement","className","react_chartjs_2_es","data","options","title","display","displayTitle","legend","displayLegend","position","legendPosition","scales","xAxes","barPercentage","categoryPercentage","Component","defaultProps","ChartContainer","words","ts","timestamps","vote","s","score","getChartData","time","sentiments","votes","beg","totalRange","ranges","calcSent","divideSegments","t","v","sc","abs","tsConvert","unix","Date","year","getFullYear","month","getMonth","date","getDate","hour","getHours","getMinutes","sec","getSeconds","convertedRange","sent","colors","setState","labels","datasets","label","backgroundColor","chartComponents_Chart","P5Wrapper","_this$props","rest","objectWithoutProperties","canvas","p5","wrapper","newProps","remove","onNewProps","ref","axios","require","App","onChangeSubreddit","e","subreddit","target","onChangeStartDate","startDate","onChangeEndDate","endDate","onChangeSentimentChart","onSubmit","preventDefault","JSON","stringify","start","parseInt","getTime","toFixed","end","post","headers","Content-Type","Access-Control-Allow-Origin","timeout","then","res","assign","apply","concat","toConsumableArray","_ref","defineProperty","frequencies","reduce","obj","frequency","RedditCloud","CS130","Kelvin Zhang","Karen Zhang","Vishaal Agartha","CJ Ordog","Anav Sanghvi","Albert Pan","bind","assertThisInitialized","src_P5Wrapper","onChange","es","selected","showTimeSelect","timeFormat","timeIntervals","dateFormat","style","id","src_ChartContainer","ReactDOM","src_App_0"],"mappings":"0RAgZeA,EAvYA,SAACC,GAAD,OAAW,SAACC,GACzB,IAaSC,EAMLC,EAnBAC,EAAmB,GAEnBC,EAAS,IAITC,EAAW,GACXC,EAAc,GAEdC,EAAe,GAEfC,EAAW,GAKXC,EAAiB,GACjBC,EAAiB,GAIfC,EAtByB,WAuB7B,SAAAA,EAAYC,GAAWC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAErBI,KAAKH,SAAWA,EAChBG,KAAKC,UAAY,GAkBjBD,KAAKE,WAAa,CAEhB,IAAIC,EAAUlB,EAAEmB,OAASnB,EAAEoB,OAAQpB,EAAEmB,MAAkB,EAAXnB,EAAEoB,QAE9C,IAAIF,GAAWlB,EAAEmB,OAAQnB,EAAEoB,OAAQpB,EAAEmB,MAAkB,EAAXnB,EAAEoB,QAE9C,IAAIF,EAAU,GAAIlB,EAAEoB,OAAQpB,EAAEmB,MAAOnB,EAAEoB,QAEvC,IAAIF,EAAU,EAAGlB,EAAEoB,OAAQpB,EAAEmB,MAAOnB,EAAEoB,SAMxC,IAHA,IAAIC,EAAYlB,EAAiBmB,KAAKC,MAAMD,KAAKE,SAAWrB,EAAiBsB,SAEzEC,EAAU,EAlCMC,EAmCOd,OAAOe,QAAQhB,GAA1CiB,EAAA,EAAAA,EAAAF,EAAAF,OAAAI,IAAqD,KAAAC,EAAAH,EAAAE,GAAAE,EAAAlB,OAAAmB,EAAA,EAAAnB,CAAAiB,EAAA,GAAnCG,GAAmCF,EAAA,GAAAA,EAAA,IAC/CE,EAAOP,IACTA,EAAUO,GAGd,IAIIC,EAJAC,EAAWtB,OAAOe,QAAQhB,GAC9BuB,EAASC,KAAK,SAASC,EAAGC,GACxB,OAAOA,EAAE,GAAKD,EAAE,KAIhBH,EADE1B,EAAW2B,EAASV,OACZ,EAEAU,EAAS3B,GAAU,GAE/B2B,EAAWA,EAASI,MAAM,EAAG/B,GAC7B,IAAIgC,EAAQ,EAnDQC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAoDpB,QAAAC,EAAAC,EAA2BX,EAA3BY,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAqC,KAAAU,EAAAN,EAAAO,MAAAC,EAAAxC,OAAAmB,EAAA,EAAAnB,CAAAsC,EAAA,GAAzBG,EAAyBD,EAAA,GAAnBpB,EAAmBoB,EAAA,GAC/BE,EAAqB,GAATf,EAChBA,IACAzB,KAAKC,UAAUwC,KAAK,IAAIC,EAAQH,EAAMrB,EAAMP,EAASQ,EACnDnB,KAAK2C,mBAAmBrC,EAAWZ,EAAgBC,GAAiB6C,KAxDpD,MAAAI,GAAAjB,GAAA,EAAAC,EAAAgB,EAAA,YAAAlB,GAAA,MAAAK,EAAAc,QAAAd,EAAAc,SAAA,WAAAlB,EAAA,MAAAC,IAvBO,OAAA9B,OAAAgD,EAAA,EAAAhD,CAAAF,EAAA,EAAAmD,IAAA,SAAAV,MAAA,WAoF3B,IAAK,IAAIW,EAAI,EAAGA,EAAIhD,KAAKC,UAAUS,OAAQsC,IACzChD,KAAKC,UAAU+C,GAAGC,WArFO,CAAAF,IAAA,mBAAAV,MAAA,WA+F3B,IAAK,IAAIW,EAAI,EAAGA,EAAIhD,KAAKC,UAAUS,OAAQsC,IACzC,IAAK,IAAIE,EAAIF,EAAGE,EAAIlD,KAAKC,UAAUS,OAAQwC,IACrCF,GAAKE,GACTlD,KAAKC,UAAU+C,GAAGG,gBAAgBnD,KAAKC,UAAUiD,IAGrD,IAASF,EAAI,EAAGA,EAAIhD,KAAKC,UAAUS,OAAQsC,IACzChD,KAAKC,UAAU+C,GAAGI,SAtGO,CAAAL,IAAA,iBAAAV,MAAA,WA2G3B,IAAK,IAAIW,EAAI,EAAGA,EAAIhD,KAAKC,UAAUS,OAAQsC,IACzC,IAAK,IAAIE,EAAI,EAAGA,EAAIlD,KAAKE,WAAWQ,OAAQwC,IAC1ClD,KAAKC,UAAU+C,GAAGK,eAAerD,KAAKE,WAAWgD,MA7G1B,CAAAH,IAAA,qBAAAV,MAAA,SAkHViB,EAAWC,EAAKC,GACjC,OAAOvE,EAAEwE,MAAMzD,KAAK0D,gBAAgBzE,EAAE0E,IAAIL,GAAYC,EAAKC,GAC9CxD,KAAK0D,gBAAgBzE,EAAE2E,MAAMN,GAAYC,EAAKC,GAC9CxD,KAAK0D,gBAAgBzE,EAAE4E,KAAKP,GAAYC,EAAKC,MArH/B,CAAAT,IAAA,kBAAAV,MAAA,SAwHbyB,EAAKP,EAAKC,GACxB,IAAIO,EAAOD,EAAOvD,KAAKE,UAAiB,EAAJ+C,EAAc,EAAJD,GAAWC,EAEzD,OADAO,EAAOxD,KAAKC,MAAMuD,GAAQ,EAAIA,EAAOR,EAAMQ,EAAOR,OA1HvB3D,EAAA,GA+HzB8C,EA/HyB,WAgI7B,SAAAA,EAAYsB,EAAM9C,EAAMP,EAASQ,EAASsC,EAAOjB,GAAY1C,OAAAC,EAAA,EAAAD,CAAAE,KAAA0C,GAC3D1C,KAAKgE,KAAOA,EACZhE,KAAKwC,UAAYA,EACjBxC,KAAKkB,KAAOA,EACZlB,KAAKW,QAAUA,EACfX,KAAKmB,QAAUA,EACfnB,KAAKV,SAAWL,EAAEgF,KAAK/C,EAAOC,IAAUR,EAAUQ,GAAU,EAAG,EAAG5B,EAAaD,GAC/EL,EAAEiF,SAASlE,KAAKV,UAChB,IAAI6E,EAAQ5D,KAAKE,SAAWjB,EAAeA,EAAe,EACtD4E,EAAQ7D,KAAKE,SAAWjB,EAAeA,EAAe,EAC1DQ,KAAKqE,KAAO,IAAIlE,EAAUlB,EAAEmB,MAAQ,EAAInB,EAAEqF,UAAUN,GAAQ,EAAIG,EAClDlF,EAAEoB,OAAS,EAAI+D,EACfnF,EAAEqF,UAAUN,GACZhE,KAAKV,SAAWD,EAChBmD,GACdxC,KAAKuE,QAAUvE,KAAKV,UAAY,EAAID,GACpCW,KAAKyD,MAAQA,EAhJc,OAAA3D,OAAAgD,EAAA,EAAAhD,CAAA4C,EAAA,EAAAK,IAAA,SAAAV,MAAA,WAoJ3BpD,EAAEiF,SAASlE,KAAKV,UAChBL,EAAEuF,KAAKxE,KAAKyD,OACZxE,EAAE+E,KAAKhE,KAAKgE,KAAMhE,KAAKqE,KAAKI,EAAGzE,KAAKqE,KAAKK,EAAI1E,KAAKuE,WAtJvB,CAAAxB,IAAA,kBAAAV,MAAA,SA4JbsC,GACd3E,KAAKqE,KAAKlB,gBAAgBwB,EAAMN,QA7JL,CAAAtB,IAAA,OAAAV,MAAA,WAiK3BrC,KAAKqE,KAAKjB,SAjKiB,CAAAL,IAAA,iBAAAV,MAAA,SAoKduC,GACb5E,KAAKqE,KAAKlB,gBAAgByB,OArKClC,EAAA,GAyKzBvC,EAzKyB,WA0K7B,SAAAA,EAAYsE,EAAEC,EAAEG,EAAEC,EAAEtC,GAAY1C,OAAAC,EAAA,EAAAD,CAAAE,KAAAG,GAC9BH,KAAKyE,EAAIA,EACTzE,KAAK0E,EAAIA,EACT1E,KAAK6E,EAAIA,EACT7E,KAAK8E,EAAIA,EACT9E,KAAK+E,KAAON,EAAII,EAAI,EACpB7E,KAAKgF,KAAON,EAAII,EAAI,EACpB9E,KAAKiF,GAAK,EACVjF,KAAKkF,GAAK,EACVlF,KAAKwC,UAAYA,EAnLU,OAAA1C,OAAAgD,EAAA,EAAAhD,CAAAK,EAAA,EAAA4C,IAAA,OAAAV,MAAA,WAuL3B,OAAOrC,KAAK6E,EAAI7E,KAAK8E,IAvLM,CAAA/B,IAAA,SAAAV,MAAA,WA2L3BpD,EAAEoF,KAAKrE,KAAKyE,EAAGzE,KAAK0E,EAAG1E,KAAK6E,EAAG7E,KAAK8E,KA3LT,CAAA/B,IAAA,kBAAAV,MAAA,SA8LbsC,GACd,GAAK3E,KAAKmF,SAASR,GAAnB,CAIA,IAGIS,EAAiC,GAAlBpF,KAAKwC,UAAoB,KAAU,EAElD6C,EAAKrF,KAAK+E,KAAOJ,EAAMI,KACvBO,EAAKtF,KAAKgF,KAAOL,EAAMK,KAEvBK,EADY,GACMA,GAAM,EAC1BA,EAFc,EAGLA,GAHK,GAGcA,GAAM,IAClCA,GAJc,GAMZC,EANY,GAMMA,GAAM,EAC1BA,EAPc,EAQLA,GARK,GAQcA,GAAM,IAClCA,GATc,GAchB,IAAIC,EAAUC,IAAiBH,EAC7BI,EAAUD,IAAiBF,EAEzBI,EAAazG,EAAE0G,IAAI3F,KAAK4F,OAtBZ,IAuBZC,EAAa5G,EAAE0G,IAAIhB,EAAMiB,OAvBb,IA0BhB5F,KAAKiF,IAAMa,EAASP,EAAUG,EAAaN,EADjC,GAEVpF,KAAKkF,IAAMY,EAASL,EAAUC,EAAaN,EAFjC,GAGVT,EAAMM,IAAMa,EAASP,EAAUM,EAHrB,GAIVlB,EAAMO,IAAMY,EAASL,EAAUI,EAJrB,MA9NiB,CAAA9C,IAAA,kBAAAV,MAAA,WAsO3B,IACI0D,EAAU9G,EAAEmB,MAAQ,EACpB4F,EAAU/G,EAAEoB,OAAS,EACrB4F,EAAKF,EAAU/F,KAAK+E,KACpBmB,EAAKF,EAAUhG,KAAKgF,KACxBhF,KAAKiF,IALe,KAKTgB,EACXjG,KAAKkF,IANe,KAMTgB,IA5OgB,CAAAnD,IAAA,OAAAV,MAAA,WAkP3BrC,KAAKyE,GAAKzE,KAAKiF,GACfjF,KAAK0E,GAAK1E,KAAKkF,GACflF,KAAK+E,KAAO/E,KAAKyE,EAAIzE,KAAK6E,EAAI,EAC9B7E,KAAKgF,KAAOhF,KAAK0E,EAAI1E,KAAK8E,EAAI,EAC9B9E,KAAKiF,GALM,GAKDjF,KAAKiF,GACfjF,KAAKkF,GANM,GAMDlF,KAAKiF,KAvPY,CAAAlC,IAAA,WAAAV,MAAA,SA0PpBsC,GACP,OAAI3E,KAAKyE,EAAIE,EAAMF,EAAIE,EAAME,GAAK7E,KAAKyE,EAAIzE,KAAK6E,EAAIF,EAAMF,GACpDzE,KAAK0E,EAAIC,EAAMD,EAAIC,EAAMG,GAAK9E,KAAK0E,EAAI1E,KAAK8E,EAAIH,EAAMD,IA5PjC,CAAA3B,IAAA,WAAAV,MAAA,SAkQpBoC,EAAGC,GACV,OAAID,EAAIzE,KAAKyE,GAAKA,EAAIzE,KAAKyE,EAAIzE,KAAK6E,GAChCH,EAAI1E,KAAK0E,GAAKA,EAAI1E,KAAK0E,EAAI1E,KAAK8E,MApQT3E,EAAA,GA2QzBgG,EA3QyB,WA4Q7B,SAAAA,EAAYlG,GAAYH,OAAAC,EAAA,EAAAD,CAAAE,KAAAmG,GACtBnG,KAAKC,UAAYA,EACjBD,KAAKoG,YAAc,KACnBpG,KAAKqG,QAAU,EACfrG,KAAKuE,QAAU,EACfvE,KAAKsG,OAAS,EACdtG,KAAKuG,OAAS,EACdvG,KAAKwG,WAAY,EACjBxG,KAAKyG,eAAiB,EApRK,OAAA3G,OAAAgD,EAAA,EAAAhD,CAAAqG,EAAA,EAAApD,IAAA,eAAAV,MAAA,WAwR3B,IAAK,IAAIW,EAAI,EAAGA,EAAIhD,KAAKC,UAAUS,OAAQsC,IACrChD,KAAKC,UAAU+C,GAAGqB,KAAKqC,SAASzH,EAAE0H,OAAQ1H,EAAE2H,UAC9C5G,KAAKoG,YAAcpG,KAAKC,UAAU+C,GAClChD,KAAKqG,QAAUpH,EAAE0H,OAAS3G,KAAKC,UAAU+C,GAAGqB,KAAKI,EACjDzE,KAAKuE,QAAUtF,EAAE2H,OAAS5G,KAAKC,UAAU+C,GAAGqB,KAAKK,GAGrD1E,KAAKwG,WAAY,EACjBxG,KAAKsG,OAASrH,EAAE0H,OAChB3G,KAAKuG,OAAStH,EAAE2H,SAjSW,CAAA7D,IAAA,gBAAAV,MAAA,WAqSvBrC,KAAKsG,OAASrH,EAAE0H,OAAS3G,KAAKyG,gBAAkBzG,KAAKsG,OAASrH,EAAE0H,QAAU3G,KAAKyG,gBAC/EzG,KAAKuG,OAAStH,EAAE2H,OAAS5G,KAAKyG,gBAAkBzG,KAAKuG,OAAStH,EAAE2H,QAAU5G,KAAKyG,gBACjFzG,KAAK6G,eAEP7G,KAAKoG,YAAc,KACnBpG,KAAKwG,WAAY,IA1SU,CAAAzD,IAAA,eAAAV,MAAA,WA8SH,MAApBrC,KAAKoG,cACPU,QAAQC,IAAI/G,KAAKoG,YAAYpC,MAC7BhE,KAAKgH,0BAhToB,CAAAjE,IAAA,oBAAAV,MAAA,WAqTH,MAApBrC,KAAKoG,cAGTpG,KAAKoG,YAAY/B,KAAKI,EAAIxF,EAAE0H,OAAS3G,KAAKqG,QAC1CrG,KAAKoG,YAAY/B,KAAKK,EAAIzF,EAAE2H,OAAS5G,KAAKuE,WAzTf,CAAAxB,IAAA,uBAAAV,MAAA,WA6T3B,IAAIyB,EAEFA,EADsB,MAApB9D,KAAKoG,YACD,GAEApG,KAAKoG,YAAYpC,KAGzB,IAAIiD,EAAQC,SAASC,eAAe,cACPrH,OAAOsH,yBAAyBC,OAAOC,iBAAiBC,UAAW,SAASC,IAClFC,KAAKR,EAAOnD,GACnC,IAAI4D,EAAK,IAAIC,MAAM,QAAS,CAAEC,SAAS,IACvCd,QAAQC,IAAIW,GACZT,EAAMY,cAAcH,OAzUOvB,EAAA,GAoX/B,SAASL,EAAShC,EAAKN,GAGrB,OADYM,EAAM,GAAMA,EAAMA,GACnBN,GAFCM,EAAM,GAAM,EAAI,GAGZN,EAEPM,EA7CX7E,EAAE6I,MAAQ,WACR7I,EAAE8I,aAAa,IAAK,KACpB9I,EAAEiF,SAAS5E,GACXL,EAAE+I,UAAU/I,EAAEgJ,KAAMhJ,EAAEiJ,KACtBjJ,EAAEkJ,YAAY,GACd/I,EAAmB,CACjBH,EAAEwE,MAAM,EAAG,GAAI,KACfxE,EAAEwE,MAAM,GAAI,IAAK,IACjBxE,EAAEwE,MAAM,IAAK,IAAK,IAClBxE,EAAEwE,MAAM,IAAK,GAAI,KACjBxE,EAAEwE,MAAM,GAAI,IAAK,MAEnBvE,EAAQ,IAAIU,EAAUZ,EAAMoJ,MAE5BjJ,EAAK,IAAIgH,EAAajH,EAAMe,YAI9BhB,EAAEoJ,KAAO,WAOPpJ,EAAEqJ,WAAW,KAEbpJ,EAAMmE,iBACNnE,EAAMqJ,mBACNpJ,EAAGqJ,oBACHtJ,EAAM+D,UAmBRhE,EAAEwJ,aAAe,WACftJ,EAAGsJ,gBAGLxJ,EAAEyJ,cAAgB,WAChBvJ,EAAGuJ,oCCzYDC,cACJ,SAAAA,EAAY3J,GAAM,IAAA4J,EAAA,OAAA9I,OAAAC,EAAA,EAAAD,CAAAE,KAAA2I,IAChBC,EAAA9I,OAAA+I,EAAA,EAAA/I,CAAAE,KAAAF,OAAAgJ,EAAA,EAAAhJ,CAAA6I,GAAAlB,KAAAzH,KAAMhB,KACD+J,MAAQ,CACXC,UAAUhK,EAAMgK,WAHFJ,wEAehB,OACEK,EAAA3H,EAAA4H,cAAA,OAAKC,UAAU,SACbF,EAAA3H,EAAA4H,cAACE,EAAA,EAAD,CACEC,KAAMrJ,KAAK+I,MAAMC,UACjBM,QAAS,CACPC,MAAM,CACJC,QAAQxJ,KAAKhB,MAAMyK,aACnBzF,KAAK,SAAShE,KAAKhB,MAAMuD,KACzBjD,SAAS,IAEXoK,OAAO,CACLF,QAAQxJ,KAAKhB,MAAM2K,cACnBC,SAAS5J,KAAKhB,MAAM6K,gBAEtBC,OAAQ,CACNC,MAAO,CAAC,CACNC,cAAe,EACfC,mBAAoB,gBAjChBC,aAAdvB,EAQGwB,aAAe,CACpBV,cAAa,EACbE,eAAe,EACfE,eAAe,QACftH,KAAK,QA+BMoG,gBCuMAyB,cA1Ob,SAAAA,IAAa,IAAAxB,EAAA,OAAA9I,OAAAC,EAAA,EAAAD,CAAAE,KAAAoK,IACXxB,EAAA9I,OAAA+I,EAAA,EAAA/I,CAAAE,KAAAF,OAAAgJ,EAAA,EAAAhJ,CAAAsK,GAAA3C,KAAAzH,QACK+I,MAAQ,CACXC,UAAU,GACVzG,KAAM8G,EAAKgB,MAAM,GAAG9H,KACpB+H,GAAIjB,EAAKgB,MAAM,GAAGE,WAClBC,KAAMnB,EAAKgB,MAAM,GAAGG,KACpBC,EAAGpB,EAAKgB,MAAM,GAAGK,OAPR9B,oFAWX5I,KAAK2K,sDASL,IAGI3H,EAHA4H,EAAO5K,KAAK+I,MAAMuB,GAClBO,EAAa7K,KAAK+I,MAAM0B,EACxBK,EAAQ9K,KAAK+I,MAAMyB,KAOnBO,EAAMH,EAAK,GAEXI,EADMJ,EAAKA,EAAKlK,OAAO,GACJqK,EAGnBC,EAAa,IAAO,IACtBA,GAAe,GAAIA,EAAW,IAGhC,IAAIC,EAAS,GAIb,IAHAA,EAAOvK,OAAS,GAEhBuK,EAAO,GAAKF,EACR/H,EAAI,EAAGA,EAAIiI,EAAOvK,OAAQsC,IAC5BiI,EAAOjI,GAAKiI,EAAOjI,EAAE,GAAMgI,EAAW,GAOxC,IAAI9J,EAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnCgK,EAAW,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAE3C,SAASC,EAAeF,EAAQG,EAAGC,EAAGC,GACjCF,GAAKH,EAAO,IAAMG,EAAIH,EAAO,IAC9B/J,EAAK,KACLgK,EAAS,IAAOI,EAAGD,EAAG9K,KAAKgL,IAAIF,IAEzBD,GAAKH,EAAO,IAAMG,EAAIH,EAAO,IACnC/J,EAAK,KACLgK,EAAS,IAAOI,EAAGD,EAAG9K,KAAKgL,IAAIF,IAEzBD,GAAKH,EAAO,IAAMG,EAAIH,EAAO,IACnC/J,EAAK,KACLgK,EAAS,IAAOI,EAAGD,EAAG9K,KAAKgL,IAAIF,IAEzBD,GAAKH,EAAO,IAAMG,EAAIH,EAAO,IACnC/J,EAAK,KACLgK,EAAS,IAAOI,EAAGD,EAAG9K,KAAKgL,IAAIF,IAEzBD,GAAKH,EAAO,IAAMG,EAAIH,EAAO,IACnC/J,EAAK,KACLgK,EAAS,IAAOI,EAAGD,EAAG9K,KAAKgL,IAAIF,IAEzBD,GAAKH,EAAO,IAAMG,EAAIH,EAAO,IACnC/J,EAAK,KACLgK,EAAS,IAAOI,EAAGD,EAAG9K,KAAKgL,IAAIF,IAEzBD,GAAKH,EAAO,IAAMG,EAAIH,EAAO,IACnC/J,EAAK,KACLgK,EAAS,IAAOI,EAAGD,EAAG9K,KAAKgL,IAAIF,IAEzBD,GAAKH,EAAO,IAAMG,EAAIH,EAAO,IACnC/J,EAAK,KACLgK,EAAS,IAAOI,EAAGD,EAAG9K,KAAKgL,IAAIF,IAEzBD,GAAKH,EAAO,IAAMG,EAAIH,EAAO,IACnC/J,EAAK,KACLgK,EAAS,IAAOI,EAAGD,EAAG9K,KAAKgL,IAAIF,IAEzBD,GAAKH,EAAO,IAAMG,GAAKH,EAAO,MACpC/J,EAAK,KACLgK,EAAS,IAAOI,EAAGD,EAAG9K,KAAKgL,IAAIF,IAKnC,IAAIrI,EAAI,EAAGA,EAAI4H,EAAKlK,OAAQsC,IAC1BmI,EAAeF,EAAQL,EAAK5H,GAAI8H,EAAM9H,GAAI6H,EAAW7H,IAIvD,IAAIA,EAAI,EAAGA,EAAIkI,EAASxK,OAAQsC,IAC9BkI,EAASlI,IAAM9B,EAAK8B,GACpB8D,QAAQC,IAAI,SAAU7F,EAAK8B,GAAI,SAAUkI,EAASlI,IAOpD,SAASwI,EAAUC,GACjB,IAAIxE,EAAQ,IAAIyE,KAAY,IAAPD,GAEjBE,EAAO1E,EAAM2E,cACbC,EAFS,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAE7D5E,EAAM6E,YACrBC,EAAO9E,EAAM+E,UACbC,EAAOhF,EAAMiF,WACb3I,EAAM0D,EAAMkF,aACZC,EAAMnF,EAAMoF,aAOhB,OALGD,EAAM,KACPA,EAAM,IAAMA,GAGHP,EAAQ,IAAME,EAAO,KAAOJ,EAAO,IAAMM,EAAO,IAAM1I,EAInE,IAAI+I,EAAiB,GAGrB,IAFAA,EAAe5L,OAASuK,EAAOvK,OAE3BsC,EAAI,EAAGA,EAAIiI,EAAOvK,OAAQsC,IAC5BsJ,EAAetJ,GAAKwI,EAAUP,EAAOjI,IAOvC,IAGmBuJ,EAHfC,EAAS,GAmEb,IAlEAA,EAAO9L,OAASwK,EAASxK,OAkErBsC,EAAI,EAAGA,EAAIkI,EAASxK,OAAQsC,IAC9BwJ,EAAOxJ,IAjEUuJ,EAiEKrB,EAASlI,MAhEnB,GACH,oBAEDuJ,GAAQ,IAAOA,IAAS,GACvB,oBAEDA,GAAQ,IAAOA,IAAS,GACrB,sBAEHA,GAAQ,IAAOA,IAAS,GACvB,uBAEDA,GAAQ,IAAOA,IAAS,GACvB,uBAEDA,GAAQ,IAAOA,IAAS,GACrB,uBAEHA,GAAQ,IAAOA,IAAS,GACvB,uBAEDA,GAAQ,IAAOA,IAAS,GACrB,uBAEHA,GAAQ,IAAOA,IAAS,GACvB,uBAEDA,GAAQ,IAAOA,GAAQ,EACpB,uBAEHA,EAAO,GAAKA,GAAQ,GACnB,uBAEDA,EAAO,IAAOA,GAAQ,GACnB,yBAEHA,EAAO,IAAOA,GAAQ,GACrB,wBAEDA,EAAO,IAAOA,GAAQ,GACnB,sBAEHA,EAAO,IAAOA,GAAQ,GACrB,sBAEDA,EAAO,IAAOA,GAAQ,GACnB,sBAEHA,EAAO,IAAOA,GAAQ,GACrB,sBAEDA,EAAO,IAAOA,GAAQ,GACnB,qBAGHA,EAAO,IAAOA,GAAQ,GACnB,qBAEHA,EAAO,IAAOA,GAAQ,EACrB,0BADJ,EASPvM,KAAKyM,SAAS,CACZzD,UAAU,CACR0D,OAAQJ,EAAe9K,MAAM,EAAG,IAChCmL,SAAS,CACP,CACEC,MAAO5M,KAAK+I,MAAMxG,KAClB8G,KAAKnI,EACL2L,gBAAiBL,wCAQzB,OACEvD,EAAA3H,EAAA4H,cAAA,OAAKC,UAAU,OACbF,EAAA3H,EAAA4H,cAAC4D,EAAD,CAAO9D,UAAWhJ,KAAK+I,MAAMC,UAAWzG,KAAMvC,KAAK+I,MAAMxG,KAAMsH,eAAe,mBArOzDK,sCCqBd6C,8LA3BS,IAAAC,EACUhN,KAAKhB,MAAzBD,EADUiO,EACVjO,OAAWkO,EADDnN,OAAAoN,EAAA,EAAApN,CAAAkN,EAAA,YAElBhN,KAAKmN,OAAS,IAAIC,IAAGrO,EAAOkO,GAAOjN,KAAKqN,2DAGhBC,GACIA,EAApBvO,OAD0B,IACfkO,EADenN,OAAAoN,EAAA,EAAApN,CACNwN,EADM,YAElCxG,QAAQC,IAAIuG,GACRtN,KAAKhB,MAAMoJ,OAASkF,EAASlF,OAC/BpI,KAAKmN,OAAOI,SACZvN,KAAKmN,OAAS,IAAIC,IAAGE,EAASvO,OAAOkO,GAAOjN,KAAKqN,UAGb,oBAA3BrN,KAAKmN,OAAOK,YACrBxN,KAAKmN,OAAOK,WAAWF,kDAKzBtN,KAAKmN,OAAOI,0CAGL,IAAA3E,EAAA5I,KACP,OAAOiJ,EAAA3H,EAAA4H,cAAA,OAAKuE,IAAK,SAACJ,GAAD,OAAazE,EAAKyE,QAAUA,YAxB3BnD,aCMlBwD,UAAQC,EAAQ,MA+GPC,cA5Gb,SAAAA,EAAY5O,GAAO,IAAA4J,EAAA,OAAA9I,OAAAC,EAAA,EAAAD,CAAAE,KAAA4N,IACjBhF,EAAA9I,OAAA+I,EAAA,EAAA/I,CAAAE,KAAAF,OAAAgJ,EAAA,EAAAhJ,CAAA8N,GAAAnG,KAAAzH,KAAMhB,KAyBR6O,kBAAoB,SAACC,GACnBlF,EAAK6D,SAAS,CAAEsB,UAAWD,EAAEE,OAAO3L,SA3BnBuG,EA8BnBqF,kBAAoB,SAAClC,GACnBnD,EAAK6D,SAAS,CAAEyB,UAAWnC,KA/BVnD,EAkCnBuF,gBAAkB,SAACpC,GACjBnD,EAAK6D,SAAS,CAAE2B,QAASrC,KAnCRnD,EAsCnByF,uBAAyB,SAACP,GACxBlF,EAAK6D,SAAS,CAAElK,KAAMuL,EAAEE,OAAO3L,SAvCduG,EA0CnB0F,SAAW,SAACR,GACVA,EAAES,iBAEF,IAAIlF,EAAOmF,KAAKC,UAAU,CACxBV,UAAWnF,EAAKG,MAAMgF,UACtBW,MAAOC,UAAU/F,EAAKG,MAAMmF,UAAUU,UAAY,KAAMC,QAAQ,IAChEC,IAAKH,UAAU/F,EAAKG,MAAMqF,QAAQQ,UAAY,KAAMC,QAAQ,MAG9DnB,EAAMqB,KAAK,wBAAyB1F,EAAM,CACxC2F,QAAS,CACPC,eAAgB,iCAChBC,8BAA+B,KAEjCC,QAAS,MAEVC,KAAK,SAACC,GAAD,OAASA,EAAIhG,OAClB+F,KAAK,SAAC/F,GACL,IAAIwB,EAAa/K,OAAOwP,OAAPC,MAAAzP,OAAM,CAAQ,IAAR0P,OAAA1P,OAAA2P,EAAA,EAAA3P,CAAeuJ,EAAKpF,IAAI,SAAAyL,GAAA,IAAEnN,EAAFmN,EAAEnN,KAAMgI,EAARmF,EAAQnF,WAAYG,EAApBgF,EAAoBhF,MAAOF,EAA3BkF,EAA2BlF,KAA3B,OAAA1K,OAAA6P,EAAA,EAAA7P,CAAA,GAAwCyC,EAAO,CAACgI,aAAYG,QAAOF,cAC9GoF,EAAcvG,EAAKwG,OAAO,SAAC5L,EAAK6L,GAAN,OAAe7L,EAAI6L,EAAIvN,MAAQuN,EAAIC,UAAW9L,GAAM,IAElF2E,EAAK6D,SAAS,CACZ5B,WAAYA,EACZ+E,YAAaA,OA/DjBhH,EAAKG,MAAQ,CACXgF,UAAW,GACXG,UAAW,IAAIxC,KACf0C,QAAS,IAAI1C,KACbnJ,KAAM,GACNqN,YAAa,CACXI,YAAe,GACfC,MAAS,GACTC,eAAgB,EAChBC,cAAe,EACfC,kBAAmB,EACnBC,WAAY,EACZC,eAAgB,EAChBC,aAAc,GAEhB1F,WAAY,IAGdjC,EAAKiF,kBAAoBjF,EAAKiF,kBAAkB2C,KAAvB1Q,OAAA2Q,EAAA,EAAA3Q,QAAA2Q,EAAA,EAAA3Q,CAAA8I,KACzBA,EAAKqF,kBAAoBrF,EAAKqF,kBAAkBuC,KAAvB1Q,OAAA2Q,EAAA,EAAA3Q,QAAA2Q,EAAA,EAAA3Q,CAAA8I,KACzBA,EAAKuF,gBAAkBvF,EAAKuF,gBAAgBqC,KAArB1Q,OAAA2Q,EAAA,EAAA3Q,QAAA2Q,EAAA,EAAA3Q,CAAA8I,KACvBA,EAAKyF,uBAAyBzF,EAAKyF,uBAAuBmC,KAA5B1Q,OAAA2Q,EAAA,EAAA3Q,QAAA2Q,EAAA,EAAA3Q,CAAA8I,KAvBbA,wEAuEjB,OACEK,EAAA3H,EAAA4H,cAAA,OAAKC,UAAU,OACbF,EAAA3H,EAAA4H,cAACwH,EAAD,CAAW3R,OAAQA,EAAQqJ,KAAMpI,KAAK+I,MAAM6G,cAC5C3G,EAAA3H,EAAA4H,cAAA,QAAMoF,SAAUtO,KAAKsO,UACnBrF,EAAA3H,EAAA4H,cAAA,SAAO7G,MAAOrC,KAAK+I,MAAMgF,UAAW4C,SAAU3Q,KAAK6N,oBACnD5E,EAAA3H,EAAA4H,cAAC0H,EAAA,EAAD,CACEC,SAAU7Q,KAAK+I,MAAMmF,UACrByC,SAAU3Q,KAAKiO,kBACf6C,gBAAc,EACdC,WAAW,QACXC,cAAe,EACfC,WAAW,sBAEbhI,EAAA3H,EAAA4H,cAAC0H,EAAA,EAAD,CACEC,SAAU7Q,KAAK+I,MAAMqF,QACrBuC,SAAU3Q,KAAKmO,gBACf2C,gBAAc,EACdC,WAAW,QACXC,cAAe,EACfC,WAAW,sBAEbhI,EAAA3H,EAAA4H,cAAA,yBAEFD,EAAA3H,EAAA4H,cAAA,SAAOgI,MAAO,CAAC1H,QAAQ,QAAS2H,GAAG,aAAa9O,MAAM,GAAGsO,SAAU3Q,KAAKqO,yBACpB,qBAA5CrO,KAAK+I,MAAM8B,WAAW7K,KAAK+I,MAAMxG,OACvC0G,EAAA3H,EAAA4H,cAACkI,EAAD,CACE7O,KAAMvC,KAAK+I,MAAMxG,KACjB+H,GAAItK,KAAK+I,MAAM8B,WAAW7K,KAAK+I,MAAMxG,MAAMgI,WAC3CC,KAAMxK,KAAK+I,MAAM8B,WAAW7K,KAAK+I,MAAMxG,MAAMiI,KAC7CC,EAAGzK,KAAK+I,MAAM8B,WAAW7K,KAAK+I,MAAMxG,MAAMmI,gBArGpCR,aCNlBmH,IAASpO,OAAOgG,EAAA3H,EAAA4H,cAACoI,EAAD,MAASpK,SAASC,eAAe","file":"static/js/main.9eb27d05.chunk.js","sourcesContent":["/*\n\tTODO:\n\t\t1. add inwards force\n\t\t2. add color\n\t\t3. add ability to click/drag words\n\t\t4. clean up/refactor\n\t\t5. figure out communication with sentiment charts\n*/\n\nconst sketch = (props) => (p) => { \n  var colorBaseOptions = [];\n  \n  var scalar = 0.82; // Different for each font\n  var debug = false;\n  \n  var font,\n      fontSize = 80,\n      minFontSize = 12;\n  \n  var spawnBoxSize = 50;\n\n  var maxWords = 40;\n    \n  var x,y, cloud;\n  \n  var numColors = 10;\n  var colorMinOffset = 10;\n  var colorMaxOffset = 65;\n  \n  var ih;\n  \n  class wordCloud {\n    constructor(wordDict) {\n    \n      this.wordDict = wordDict;\n      this.wordBoxes = [];\n      /*\n        boundaries are much bigger than necessary to ensure that \n        no words exit the screen by jumping over or through a boundary\n  \n        (0,0)\n      |--------|--------|--------|\n      |        |   b3   |        |\n      |        |        |        |\n      |        |--------|        |\n      |   b2   | canvas |   b1   |\n      |        |        |        |\n      |        |--------|        |\n      |        |   b4   |        |\n      |        |        |        |\n      |--------|--------|--------|\n                    (width, height)\n      */\n      this.boundaries = [\n        //b1\n        new Rectangle(p.width,  -p.height, p.width, p.height * 3),\n        //b2\n        new Rectangle(-p.width, -p.height, p.width, p.height * 3),\n        //b3\n        new Rectangle(0, -p.height, p.width, p.height),\n        //b4\n        new Rectangle(0, p.height, p.width, p.height)\n      ];\n  \n      var baseColor = colorBaseOptions[Math.floor(Math.random() * colorBaseOptions.length)];\n  \n      var maxFreq = 0;\n      for (const [word, freq] of Object.entries(wordDict)) {\n        if (freq > maxFreq) {\n          maxFreq = freq;\n        }\n      }\n      var sortable = Object.entries(wordDict);\n      sortable.sort(function(a, b) {\n        return b[1] - a[1];\n      });\n      var minFreq;\n      if (maxWords > sortable.length) {\n        minFreq = 1;\n      } else {\n        minFreq = sortable[maxWords][1];\n      }\n      sortable = sortable.slice(0, maxWords);\n      var count = 0;\n      for (const [word, freq] of sortable) {\n        var isBiggest = count == 0 ? true : false;\n        count++;\n        this.wordBoxes.push(new wordBox(word, freq, maxFreq, minFreq, \n          this.getProceduralColor(baseColor, colorMinOffset, colorMaxOffset), isBiggest));\n      }\n    }\n  \n    render() {\n      for (var i = 0; i < this.wordBoxes.length; i++) {\n        this.wordBoxes[i].render();\n      }\n      if (debug) {\n        for (var i = 0; i < this.boundaries.length; i++) {\n          this.boundaries[i].render();\n        }\n      }\n    }\n  \n    handleCollisions() {\n      for (var i = 0; i < this.wordBoxes.length; i++) {\n        for (var j = i; j < this.wordBoxes.length; j++) {\n          if (i == j) continue;\n          this.wordBoxes[i].handleCollision(this.wordBoxes[j]);\n        }\n      }\n      for (var i = 0; i < this.wordBoxes.length; i++) {\n        this.wordBoxes[i].move();\n      }\n    }\n  \n    handleBoundary() {\n      for (var i = 0; i < this.wordBoxes.length; i++) {\n        for (var j = 0; j < this.boundaries.length; j++) {\n          this.wordBoxes[i].handleBoundary(this.boundaries[j]);\n        }\n      }\n    }\n  \n    getProceduralColor(colorBase, min, max) {\n      return p.color(this.procColorHelper(p.red(colorBase), min, max),\n                   this.procColorHelper(p.green(colorBase), min, max),\n                   this.procColorHelper(p.blue(colorBase), min, max))\n    }\n  \n    procColorHelper(val, min, max) {\n      var temp = val + (Math.random() * ((max*2) - (min*2))) - max;\n      temp = Math.floor(temp <= 0 ? temp - min : temp + min);\n      return temp;\n    }\n  }\n  \n  class wordBox {\n    constructor(text, freq, maxFreq, minFreq, color, isBiggest) {\n      this.text = text;\n      this.isBiggest = isBiggest;\n      this.freq = freq;\n      this.maxFreq = maxFreq;\n      this.minFreq = minFreq;\n      this.fontSize = p.map((freq - minFreq)/(maxFreq - minFreq), 0, 1, minFontSize, fontSize);\n      p.textSize(this.fontSize);\n      var randX = Math.random() * spawnBoxSize - spawnBoxSize / 2;\n      var randY = Math.random() * spawnBoxSize - spawnBoxSize / 2;\n      this.rect = new Rectangle(p.width / 2 - p.textWidth(text) / 2 + randX, \n                    p.height / 2 + randY, \n                    p.textWidth(text), \n                    this.fontSize * scalar,\n                    isBiggest);\n      this.yOffset = this.fontSize * (1 - scalar);\n      this.color = color;\n    }\n  \n    render() {\n      p.textSize(this.fontSize);\n      p.fill(this.color);\n      p.text(this.text, this.rect.x, this.rect.y - this.yOffset);\n      if (debug) {\n        this.rect.render();\n      }\n    }\n    \n    handleCollision(other) {\n      this.rect.handleCollision(other.rect);\n    }\n  \n    move() {\n      this.rect.move();\n    }\n  \n    handleBoundary(bound) {\n      this.rect.handleCollision(bound);\n    }\n  }\n  \n  class Rectangle {\n    constructor(x,y,w,h,isBiggest) {\n      this.x = x;\n      this.y = y;\n      this.w = w;\n      this.h = h;\n      this.midX = x + w / 2;\n      this.midY = y + h / 2;\n      this.vx = 0;\n      this.vy = 0;\n      this.isBiggest = isBiggest\n    }\n  \n    area() {\n      return this.w * this.h;\n    }\n  \n    render() {\n      p.rect(this.x, this.y, this.w, this.h);\n    }\n  \n    handleCollision(other) {\n      if (!this.collides(other)) {\n        return\n      }\n\n      var spring = 0.5;\n      var force = 800000;\n      var sizeScale = 0.3;\n      var biggestScale = this.isBiggest == true ? 1/50000 : 1;\n\n      var dx = this.midX - other.midX,\n          dy = this.midY - other.midY;\n      var threshold = 1.0;\n      if (dx < threshold && dx >= 0) {\n        dx = threshold;\n      } else if (dx > -threshold && dx <= 0) {\n        dx = -threshold;\n      }\n      if (dy < threshold && dy >= 0) {\n        dy = threshold;\n      } else if (dy > -threshold && dy <= 0) {\n        dy = -threshold;\n      }\n  \n      // var constvx = force * spring * dx / distance / distance,\n      // \tconstvy = force * spring * dy / distance / distance;\n      var constvx = force * spring / dx, // Math.abs(dx),\n        constvy = force * spring / dy; // Math.abs(dy);\n  \n      var areaScale1 = p.pow(this.area(), sizeScale);\n      var areaScale2 = p.pow(other.area(), sizeScale);\n  \n      var max = 1;\n      this.vx += clampAbs(constvx / areaScale1 * biggestScale, max);\n      this.vy += clampAbs(constvy / areaScale1 * biggestScale, max);\n      other.vx -= clampAbs(constvx / areaScale2, max);\n      other.vy -= clampAbs(constvy / areaScale2, max);\n    }\n  \n    addInwardsForce() {\n      var forceStrength = 0.0001;\n      var centerX = p.width / 2;\n      var centerY = p.height / 2;\n      var fX = centerX - this.midX;\n      var fY = centerY - this.midY;\n      this.vx += fX * forceStrength;\n      this.vy += fY * forceStrength;\n    }\n  \n    move() {\n      // this.addInwardsForce();\n      var drag = 0.4;\n      this.x += this.vx;\n      this.y += this.vy;\n      this.midX = this.x + this.w / 2;\n      this.midY = this.y + this.h / 2;\n      this.vx = this.vx * drag;\n      this.vy = this.vx * drag;\n    }\n  \n    collides(other) {\n      if (this.x < other.x + other.w && this.x + this.w > other.x &&\n            this.y < other.y + other.h && this.y + this.h > other.y) {\n        return true;\n      }\n      return false;\n    }\n  \n    contains(x, y) {\n      if (x > this.x && x < this.x + this.w &&\n          y > this.y && y < this.y + this.h) {\n        return true;\n      }\n      return false;\n    }\n  }\n  \n  class InputHandler {\n    constructor(wordBoxes) {\n      this.wordBoxes = wordBoxes;\n      this.attachedBox = null;\n      this.xOffset = 0;\n      this.yOffset = 0;\n      this.clickX = 0;\n      this.clickY = 0;\n      this.isPressed = false;\n      this.clickThreshold = 2;\n    }\n  \n    mousePressed() {\n      for (var i = 0; i < this.wordBoxes.length; i++) {\n        if (this.wordBoxes[i].rect.contains(p.mouseX, p.mouseY)) {\n          this.attachedBox = this.wordBoxes[i];\n          this.xOffset = p.mouseX - this.wordBoxes[i].rect.x;\n          this.yOffset = p.mouseY - this.wordBoxes[i].rect.y;\n        }\n      }\n      this.isPressed = true;\n      this.clickX = p.mouseX;\n      this.clickY = p.mouseY;\n    }\n  \n    mouseReleased() {\n      if (this.clickX - p.mouseX < this.clickThreshold && this.clickX - p.mouseX > -this.clickThreshold &&\n          this.clickY - p.mouseY < this.clickThreshold && this.clickY - p.mouseY > -this.clickThreshold) {\n        this.mouseClicked();\n      }\n      this.attachedBox = null;\n      this.isPressed = false;\n    }\n  \n    mouseClicked() {\n      if (this.attachedBox != null) {\n        console.log(this.attachedBox.text);\n        this.updateSentimentChart();\n      }\n    }\n  \n    handleAttachedBox() {\n      if (this.attachedBox == null) {\n        return;\n      }\n      this.attachedBox.rect.x = p.mouseX - this.xOffset;\n      this.attachedBox.rect.y = p.mouseY - this.yOffset;\n    }\n  \n    updateSentimentChart() {\n      var val;\n      if (this.attachedBox == null) {\n        val = \"\";\n      } else {\n        val = this.attachedBox.text;\n      }\n\n      var input = document.getElementById(\"canvasForm\");\n      var nativeInputValueSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, \"value\").set;\n      nativeInputValueSetter.call(input, val);\n      var ev = new Event('input', { bubbles: true});\n      console.log(ev);\n      input.dispatchEvent(ev);\n    }\n  }\n  \n  p.setup = () => {\n    p.createCanvas(720, 400);\n    p.textSize(fontSize);\n    p.textAlign(p.LEFT, p.TOP);\n    p.textLeading(0);\n    colorBaseOptions = [\n      p.color(0, 51, 204),\n      p.color(51, 204, 51),\n      p.color(255, 153, 51),\n      p.color(153, 51, 255),\n      p.color(51, 204, 204)\n    ];\n    cloud = new wordCloud(props.dict);\n    //make sure to initialize inputHandler after wordCloud, should refactor this\n    ih = new InputHandler(cloud.wordBoxes);\n  }\n  \n  \n  p.draw = () => {\n    if (debug) {\n      p.noFill();\n      p.stroke(255, 128, 0);\n    } else {\n  \n    }\n    p.background(255);\n  \n    cloud.handleBoundary();\n    cloud.handleCollisions();\n    ih.handleAttachedBox();\n    cloud.render();\n  }\n  \n  // p.windowResized = () => {\n  //   var width = document.getElementById('canvasContainer').offsetWidth;\n  //   var height = document.getElementById('canvasContainer').offsetHeight;\n  //   p.resizeCanvas(width, height);\n  // }\n  \n  function clampAbs(val, max) {\n    var sign = (val < 0) ? -1 : 1;\n    var temp = (val < 0) ? -val : val;\n    if (temp > max) {\n      return sign * max;\n    } else {\n      return val;\n    }\n  }\n  \n  p.mousePressed = () => {\n    ih.mousePressed();\n  }\n  \n  p.mouseReleased = () => {\n    ih.mouseReleased();\n  }\n}\n\nexport default sketch;\n","import React, {Component} from 'react';\nimport {Bar} from 'react-chartjs-2';\n\nclass Chart extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      chartData:props.chartData\n    }\n  }\n\n  static defaultProps = {\n    displayTitle:true,\n    displayLegend: true,\n    legendPosition:'right',\n    word:'City'\n  }\n\n  render(){\n    return (\n      <div className=\"chart\">\n        <Bar\n          data={this.state.chartData}\n          options={{\n            title:{\n              display:this.props.displayTitle,\n              text:'word: '+this.props.word,\n              fontSize:25\n            },\n            legend:{\n              display:this.props.displayLegend,\n              position:this.props.legendPosition\n            },\n            scales :{\n              xAxes: [{\n                barPercentage: 1,\n                categoryPercentage: 1\n            }]\n          }\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Chart;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Chart from './chartComponents/Chart';\nimport data from \"./chartComponents/data.json\";\n\n//REFERENCE FOR JSON PURPOSES:\n// {'score': vs, 'vote': vote, 'timestamp': timestamp, 'word': word}\n\n//\n\nclass ChartContainer extends Component {\n  constructor(){\n    super();\n    this.state = {\n      chartData:{},\n      word: data.words[1].word, // this.props .. passed down from WordCloud\n      ts: data.words[1].timestamps,\n      vote: data.words[1].vote,\n      s: data.words[1].score,\n    }\n  }\n  componentWillMount(){\n    this.getChartData();\n  }\n\n  getChartData(){\n\n    //////////////////////////////////////////\n    //VARIABLES THAT WILL BE USED THROUGHOUT//\n    /////////////////////////////////////////\n\n    var time = this.state.ts;\n    var sentiments = this.state.s;\n    var votes = this.state.vote;\n    var i;  //iterator for loops\n\n    //////////////////////\n    //RANGE CALCULATION//\n    ////////////////////\n\n    var beg = time[0];\n    var end = time[time.length-1];\n    var totalRange = end - beg;\n\n    //round to nearest value divisible by 10 to get equal ranges\n    if((totalRange % 10) != 0){\n      totalRange += (10-(totalRange%10));\n    }\n\n    var ranges = [];\n    ranges.length = 11;\n\n    ranges[0] = beg;\n    for(i = 1; i < ranges.length; i++){\n      ranges[i] = ranges[i-1] + (totalRange/10);\n    }\n\n    ///////////////////////////////////////\n    //FREQUENCY AND SENTIMENT CALCULATION//\n    //////////////////////////////////////\n\n    var freq = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; //holds how often a word appears per time range\n    var calcSent = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; //hold final calculations for sentiment values to be displayed\n\n    function divideSegments(ranges, t, v, sc){\n      if(t >= ranges[0] && t < ranges[1]){\n        freq[0]++;\n        calcSent[0] += (sc*v)/Math.abs(v);\n      }\n      else if(t >= ranges[1] && t < ranges[2]){\n        freq[1]++;\n        calcSent[1] += (sc*v)/Math.abs(v);\n      }\n      else if(t >= ranges[2] && t < ranges[3]){\n        freq[2]++;\n        calcSent[2] += (sc*v)/Math.abs(v);\n      }\n      else if(t >= ranges[3] && t < ranges[4]){\n        freq[3]++;\n        calcSent[3] += (sc*v)/Math.abs(v);\n      }\n      else if(t >= ranges[4] && t < ranges[5]){\n        freq[4]++;\n        calcSent[4] += (sc*v)/Math.abs(v);\n      }\n      else if(t >= ranges[5] && t < ranges[6]){\n        freq[5]++;\n        calcSent[5] += (sc*v)/Math.abs(v);\n      }\n      else if(t >= ranges[6] && t < ranges[7]){\n        freq[6]++;\n        calcSent[6] += (sc*v)/Math.abs(v);\n      }\n      else if(t >= ranges[7] && t < ranges[8]){\n        freq[7]++;\n        calcSent[7] += (sc*v)/Math.abs(v);\n      }\n      else if(t >= ranges[8] && t < ranges[9]){\n        freq[8]++;\n        calcSent[8] += (sc*v)/Math.abs(v);\n      }\n      else if(t >= ranges[9] && t <= ranges[10]){\n        freq[9]++;\n        calcSent[9] += (sc*v)/Math.abs(v);\n      }\n\n    }\n\n    for(i = 0; i < time.length; i++){\n      divideSegments(ranges, time[i], votes[i], sentiments[i]);\n    }\n\n    //average out all the summed sentiments per range\n    for(i = 0; i < calcSent.length; i++){\n      calcSent[i] /= freq[i];\n      console.log('freq: ', freq[i], 'sent: ', calcSent[i]);\n    }\n\n    ////////////////////\n    //DATE FORMATTING//\n    //////////////////\n\n    function tsConvert(unix){\n      var input = new Date(unix * 1000);\n      var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n      var year = input.getFullYear();\n      var month = months[input.getMonth()];\n      var date = input.getDate();\n      var hour = input.getHours();\n      var min = input.getMinutes();\n      var sec = input.getSeconds();\n\n      if(sec < 10){\n        sec = '0' + sec;\n      }\n\n      var time = month + ' ' + date + ', ' + year + ' ' + hour + ':' + min;\n      return time;\n    }\n\n    var convertedRange = [];\n    convertedRange.length = ranges.length;\n\n    for(i = 0; i < ranges.length; i++){\n      convertedRange[i] = tsConvert(ranges[i]);\n    }\n\n    ///////////////////////////////\n    //SENTIMENT COLOR ASSIGNMENT//\n    /////////////////////////////\n\n    var colors = [];\n    colors.length = calcSent.length;\n\n    function sentColor(sent){\n      if(sent <= -0.9){\n        return \"rgba(45, 6, 6, 1)\";\n      }\n      else if(sent > -0.9 && sent <= -0.8){\n        return \"rgba(62, 8, 8, 1)\";\n      }\n      else if(sent > -0.8 && sent <= -0.7){\n          return \"rgba(92, 10, 10, 1)\";\n      }\n      else if(sent > -0.7 && sent <= -0.6){\n        return \"rgba(112, 15, 15, 1)\";\n      }\n      else if(sent > -0.6 && sent <= -0.5){\n        return \"rgba(135, 18, 18, 1)\";\n      }\n      else if(sent > -0.5 && sent <= -0.4){\n          return \"rgba(157, 21, 21, 1)\";\n      }\n      else if(sent > -0.4 && sent <= -0.3){\n        return \"rgba(180, 24, 24, 1)\";\n      }\n      else if(sent > -0.3 && sent <= -0.2){\n          return \"rgba(202, 28, 28, 1)\";\n      }\n      else if(sent > -0.2 && sent <= -0.1){\n        return \"rgba(224, 31, 31, 1)\";\n      }\n      else if(sent > -0.1 && sent <= 0){\n          return \"rgba(234, 98, 98, 1)\";\n      }\n      else if(sent > 0 && sent <= 0.1){\n        return \"rgba(56, 132, 18, 1)\";\n      }\n      else if(sent > 0.1 && sent <= 0.2){\n          return \"rgba(171, 251, 132, 1)\";\n      }\n      else if(sent > 0.2 && sent <= 0.3){\n        return \"rgba(105, 247, 34, 1)\";\n      }\n      else if(sent > 0.3 && sent <= 0.4){\n          return \"rgba(79, 221, 8, 1)\";\n      }\n      else if(sent > 0.4 && sent <= 0.5){\n        return \"rgba(70, 197, 7, 1)\";\n      }\n      else if(sent > 0.5 && sent <= 0.6){\n          return \"rgba(62, 172, 6, 1)\";\n      }\n      else if(sent > 0.6 && sent <= 0.7){\n        return \"rgba(44, 124, 4, 1)\";\n      }\n      else if(sent > 0.7 && sent <= 0.8){\n          return \"rgba(35, 99, 3, 1)\";\n      }\n\n      else if(sent > 0.8 && sent <= 0.9){\n          return \"rgba(26, 75, 2, 1)\";\n      }\n      else if(sent > 0.9 && sent <= 1){\n        return \"rgba(17, 50, 1, 1)\";\n      }\n    }\n\n    for(i = 0; i < calcSent.length; i++){\n      colors[i] = sentColor(calcSent[i]);\n    }\n\n    this.setState({\n      chartData:{\n        labels: convertedRange.slice(0, 10),\n        datasets:[\n          {\n            label: this.state.word,\n            data:freq,\n            backgroundColor: colors,\n          }\n        ]\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Chart chartData={this.state.chartData} word={this.state.word} legendPosition=\"bottom\"/>\n      </div>\n    );\n  }\n}\n\nexport default ChartContainer;\n","import React, { Component } from 'react';\nimport p5 from 'p5';\n\nclass P5Wrapper extends Component {\n    componentDidMount() {\n      const { sketch, ...rest } = this.props;\n      this.canvas = new p5(sketch(rest), this.wrapper);\n    }\n  \n    componentWillReceiveProps(newProps) {\n      const { sketch, ...rest } = newProps;\n      console.log(newProps)\n      if (this.props.dict !== newProps.dict) {\n        this.canvas.remove();\n        this.canvas = new p5(newProps.sketch(rest), this.wrapper);\n      }\n  \n      if (typeof this.canvas.onNewProps === \"function\") {\n        this.canvas.onNewProps(newProps);\n      }\n    }\n  \n    componentWillUnmount() {\n      this.canvas.remove();\n    }\n  \n    render() {\n      return <div ref={(wrapper) => this.wrapper = wrapper} />;\n    }\n  }\n\nexport default P5Wrapper;","import React, { Component } from 'react';\nimport DatePicker from \"react-datepicker\";\nimport sketch from './sketch';\nimport ChartContainer from './ChartContainer';\nimport P5Wrapper from './P5Wrapper';\n\nimport './App.css';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst axios = require('axios');\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      subreddit: \"\",\n      startDate: new Date(),\n      endDate: new Date(),\n      word: \"\",\n      frequencies: {\n        \"RedditCloud\": 25,\n        \"CS130\": 15,\n        \"Kelvin Zhang\": 5,\n        \"Karen Zhang\": 5,\n        \"Vishaal Agartha\": 5,\n        \"CJ Ordog\": 5,\n        \"Anav Sanghvi\": 5,\n        \"Albert Pan\": 5\n      },\n      sentiments: {}\n    };\n\n    this.onChangeSubreddit = this.onChangeSubreddit.bind(this);\n    this.onChangeStartDate = this.onChangeStartDate.bind(this);\n    this.onChangeEndDate = this.onChangeEndDate.bind(this);\n    this.onChangeSentimentChart = this.onChangeSentimentChart.bind(this);\n  }\n\n  onChangeSubreddit = (e) => {\n    this.setState({ subreddit: e.target.value });\n  }\n\n  onChangeStartDate = (date) => {\n    this.setState({ startDate: date });\n  }\n\n  onChangeEndDate = (date) => {\n    this.setState({ endDate: date });\n  }\n\n  onChangeSentimentChart = (e) => {\n    this.setState({ word: e.target.value });\n  }\n\n  onSubmit = (e) => {\n    e.preventDefault();\n\n    let data = JSON.stringify({\n      subreddit: this.state.subreddit,\n      start: parseInt((this.state.startDate.getTime() / 1000).toFixed(0)),\n      end: parseInt((this.state.endDate.getTime() / 1000).toFixed(0))\n    })\n\n    axios.post('http://127.0.0.1:8080', data, {\n      headers: {\n        'Content-Type': 'application/json;charset=UTF-8',\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n      timeout: 60000\n    })\n    .then((res) => res.data)\n    .then((data) => {\n      var sentiments = Object.assign({}, ...data.map(({word, timestamps, score, vote}) => ({[word]: {timestamps, score, vote}})));\n      var frequencies = data.reduce((map, obj) => (map[obj.word] = obj.frequency, map), {});\n\n      this.setState({\n        sentiments: sentiments,\n        frequencies: frequencies\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <P5Wrapper sketch={sketch} dict={this.state.frequencies}/>\n        <form onSubmit={this.onSubmit}>\n          <input value={this.state.subreddit} onChange={this.onChangeSubreddit} />\n          <DatePicker\n            selected={this.state.startDate}\n            onChange={this.onChangeStartDate}\n            showTimeSelect\n            timeFormat=\"HH:mm\"\n            timeIntervals={5}\n            dateFormat=\"MM/d/yyyy h:mm aa\"\n          />\n          <DatePicker\n            selected={this.state.endDate}\n            onChange={this.onChangeEndDate}\n            showTimeSelect\n            timeFormat=\"HH:mm\"\n            timeIntervals={5}\n            dateFormat=\"MM/d/yyyy h:mm aa\"\n          />\n          <button>Submit</button>\n        </form>\n        <input style={{display:\"none\"}} id=\"canvasForm\" value=\"\" onChange={this.onChangeSentimentChart}/>\n        {typeof(this.state.sentiments[this.state.word]) !== \"undefined\" &&\n          <ChartContainer \n            word={this.state.word} \n            ts={this.state.sentiments[this.state.word].timestamps} \n            vote={this.state.sentiments[this.state.word].vote} \n            s={this.state.sentiments[this.state.word].score}\n          />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}