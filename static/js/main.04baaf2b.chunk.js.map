{"version":3,"sources":["sketch.js","ChartContainer.js","P5Wrapper.js","App.js","index.js"],"names":["sketch","props","p","cloud","ih","colorBaseOptions","scalar","fontSize","minFontSize","spawnBoxSize","maxWords","colorMinOffset","colorMaxOffset","wordCloud","wordDict","Object","classCallCheck","this","wordBoxes","boundaries","Rectangle","width","height","baseColor","Math","floor","random","length","maxFreq","_arr","entries","_i","_ref5","_ref2","slicedToArray","freq","minFreq","sortable","sort","a","b","slice","count","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_ref6","value","_ref4","word","isBiggest","push","wordBox","getProceduralColor","err","return","createClass","key","i","render","j","handleCollision","move","handleBoundary","colorBase","min","max","color","procColorHelper","red","green","blue","val","temp","text","map","textSize","randX","randY","rect","textWidth","yOffset","fill","x","y","other","bound","w","h","midX","midY","vx","vy","collides","biggestScale","dx","dy","constvx","force","constvy","areaScale1","pow","area","areaScale2","clampAbs","centerX","centerY","fX","fY","InputHandler","attachedBox","xOffset","clickX","clickY","isPressed","clickThreshold","contains","mouseX","mouseY","mouseClicked","updateSentimentChart","input","document","getElementById","getOwnPropertyDescriptor","window","HTMLInputElement","prototype","set","call","ev","Event","bubbles","dispatchEvent","setup","createCanvas","textAlign","LEFT","TOP","textLeading","dict","draw","background","handleCollisions","handleAttachedBox","mousePressed","mouseReleased","ChartContainer","possibleConstructorReturn","getPrototypeOf","time","beg","totalRange","ranges","votes","sentiments","getRanges","calcSent","divideSegments","t","v","sc","abs","tsConvert","unix","Date","year","getFullYear","month","getMonth","date","getDate","hour","getHours","getMinutes","sec","getSeconds","convertedRange","sent","getFrequencyandSentiment","ts","vote","s","colors","react_default","createElement","className","react_chartjs_2_es","data","labels","datasets","label","backgroundColor","getColors","options","title","display","displayTitle","legend","displayLegend","position","legendPosition","scales","xAxes","barPercentage","categoryPercentage","Component","defaultProps","P5Wrapper","_this$props","rest","objectWithoutProperties","canvas","p5","wrapper","newProps","remove","onNewProps","_this","ref","axios","require","App","onChangeSubreddit","e","setState","subreddit","target","onChangeStartDate","startDate","onChangeEndDate","endDate","onChangeSentimentChart","onSubmit","preventDefault","JSON","stringify","state","start","parseInt","getTime","toFixed","end","post","headers","Content-Type","Access-Control-Allow-Origin","timeout","then","res","assign","apply","concat","toConsumableArray","_ref","timestamps","score","defineProperty","frequencies","reduce","obj","frequency","dateRange","RedditCloud","CS130","Kelvin Zhang","Karen Zhang","Vishaal Agartha","CJ Ordog","Anav Sanghvi","Albert Pan","bind","assertThisInitialized","src_P5Wrapper","reactstrap_es","size","addonType","onChange","placeholder","id","es","selected","showTimeSelect","timeFormat","timeIntervals","dateFormat","type","outline","style","src_ChartContainer","ReactDOM","src_App_0"],"mappings":"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","file":"static/js/main.04baaf2b.chunk.js","sourcesContent":["/**\n * Main sketch function. Sketches the entire word cloud.\n * @param {Object} props - Object containing frequency dictionary\n */ \nconst sketch = (props) => (p) => { \n  var colorBaseOptions = [];\n  \n  var scalar = 0.82; // Different for each font\n  var debug = false;\n  \n  var font,\n      fontSize = 80,\n      minFontSize = 12;\n  \n  var spawnBoxSize = 50;\n\n  var maxWords = 40;\n    \n  var x,y, cloud;\n  \n  var numColors = 10;\n  var colorMinOffset = 10;\n  var colorMaxOffset = 65;\n  \n  var ih;\n  \n  class wordCloud {\n    /**\n     * Creates an instance of the wordCloud.\n     * - Defines boundaries for the canvas.\n     * - Sorts words by frequencies\n     * - Creates wordBoxes based on frequency and randomly assigns colors \n     * @param {Object} wordDict - Object containing frequency dictionary\n     */\n    constructor(wordDict) {\n    \n      this.wordDict = wordDict;\n      this.wordBoxes = [];\n      /*\n        boundaries are much bigger than necessary to ensure that \n        no words exit the screen by jumping over or through a boundary\n  \n        (0,0)\n      |--------|--------|--------|\n      |        |   b3   |        |\n      |        |        |        |\n      |        |--------|        |\n      |   b2   | canvas |   b1   |\n      |        |        |        |\n      |        |--------|        |\n      |        |   b4   |        |\n      |        |        |        |\n      |--------|--------|--------|\n                    (width, height)\n      */\n      this.boundaries = [\n        //b1\n        new Rectangle(p.width,  -p.height, p.width, p.height * 3),\n        //b2\n        new Rectangle(-p.width, -p.height, p.width, p.height * 3),\n        //b3\n        new Rectangle(0, -p.height, p.width, p.height),\n        //b4\n        new Rectangle(0, p.height, p.width, p.height)\n      ];\n  \n      var baseColor = colorBaseOptions[Math.floor(Math.random() * colorBaseOptions.length)];\n  \n      var maxFreq = 0;\n      for (const [word, freq] of Object.entries(wordDict)) {\n        if (freq > maxFreq) {\n          maxFreq = freq;\n        }\n      }\n      var sortable = Object.entries(wordDict);\n      sortable.sort(function(a, b) {\n        return b[1] - a[1];\n      });\n      var minFreq;\n      if (maxWords > sortable.length) {\n        minFreq = 1;\n      } else {\n        minFreq = sortable[maxWords][1];\n      }\n      sortable = sortable.slice(0, maxWords);\n      var count = 0;\n      for (const [word, freq] of sortable) {\n        var isBiggest = count == 0 ? true : false;\n        count++;\n        this.wordBoxes.push(new wordBox(word, freq, maxFreq, minFreq, \n          this.getProceduralColor(baseColor, colorMinOffset, colorMaxOffset), isBiggest));\n      }\n    }\n\n    /**\n     * Main render function.\n     * - Renders individual word boxes\n     * - Renders individual boundaries\n     */\n    render() {\n      for (var i = 0; i < this.wordBoxes.length; i++) {\n        this.wordBoxes[i].render();\n      }\n      if (debug) {\n        for (var i = 0; i < this.boundaries.length; i++) {\n          this.boundaries[i].render();\n        }\n      }\n    }\n  \n    /**\n     * Handles collisions between wordBoxes by calling\n     * handleCollision() and move() on each wordBox\n     */\n    handleCollisions() {\n      for (var i = 0; i < this.wordBoxes.length; i++) {\n        for (var j = i; j < this.wordBoxes.length; j++) {\n          if (i == j) continue;\n          this.wordBoxes[i].handleCollision(this.wordBoxes[j]);\n        }\n      }\n      for (var i = 0; i < this.wordBoxes.length; i++) {\n        this.wordBoxes[i].move();\n      }\n    }\n  \n    /**\n     * Handles boundaries between boundaries by calling\n     * handleBoundary on individual boundaries.\n     */\n    handleBoundary() {\n      for (var i = 0; i < this.wordBoxes.length; i++) {\n        for (var j = 0; j < this.boundaries.length; j++) {\n          this.wordBoxes[i].handleBoundary(this.boundaries[j]);\n        }\n      }\n    }\n\n    /**\n     * Gets procedural color based on an initial value, min, and max\n     * @param {Color Base} colorBase - Color base value\n     * @param {Integer} min - Minimum offset from base value\n     * @param {Integer} max - Maximum offset from base value\n     * @return {P5 Color} - Color for wordBox\n     */ \n    getProceduralColor(colorBase, min, max) {\n      return p.color(this.procColorHelper(p.red(colorBase), min, max),\n                   this.procColorHelper(p.green(colorBase), min, max),\n                   this.procColorHelper(p.blue(colorBase), min, max))\n    }\n  \n    /**\n     * Helper function to randomly create a procedural color\n     * @param {Integer} val - Color base value\n     * @param {Integer} min - Minimum offset from base value\n     * @param {Integer} max - Maximum offset from base value\n     * @return {Integer} temp - Red, green, or blue integer value to be fed\n     * into P5.\n     */\n    procColorHelper(val, min, max) {\n      var temp = val + (Math.random() * ((max*2) - (min*2))) - max;\n      temp = Math.floor(temp <= 0 ? temp - min : temp + min);\n      return temp;\n    }\n  }\n  \n  class wordBox {\n    /**\n     * Creates an instance of a word box.\n     * - Passes all input parameters and binds to object\n     * - Creates instance of rectangle to contain the word\n     * @param {String} text - text to render\n     * @param {Integer} freq - frequency of the word\n     * @param {Integer} maxFreq - maximum of all frequencies in word dictionary\n     * @param {Integer} minFreq - minimum of all frequencies in word dictionary\n     * @param {P5 Color} color - color of the text\n     * @param {Boolean} isBiggest - boolean of whether the word is the biggest among all those in word dictionary\n     */\n    constructor(text, freq, maxFreq, minFreq, color, isBiggest) {\n      this.text = text;\n      this.isBiggest = isBiggest;\n      this.freq = freq;\n      this.maxFreq = maxFreq;\n      this.minFreq = minFreq;\n      this.fontSize = p.map((freq - minFreq)/(maxFreq - minFreq), 0, 1, minFontSize, fontSize);\n      p.textSize(this.fontSize);\n      var randX = Math.random() * spawnBoxSize - spawnBoxSize / 2;\n      var randY = Math.random() * spawnBoxSize - spawnBoxSize / 2;\n      this.rect = new Rectangle(p.width / 2 - p.textWidth(text) / 2 + randX, \n                    p.height / 2 + randY, \n                    p.textWidth(text), \n                    this.fontSize * scalar,\n                    isBiggest);\n      this.yOffset = this.fontSize * (1 - scalar);\n      this.color = color;\n    }\n  \n    /**\n     * Main render function for wordBox class.\n     * - Sets text size, fill, and actual text\n     * - If in debug mode, render the rectangle as well\n     */\n    render() {\n      p.textSize(this.fontSize);\n      p.fill(this.color);\n      p.text(this.text, this.rect.x, this.rect.y - this.yOffset);\n      if (debug) {\n        this.rect.render();\n      }\n    }\n    \n    /**\n     * Handles a collision for this wordBox.\n     * @param {wordBox} other - other wordBox that is colliding with this one\n     */\n    handleCollision(other) {\n      this.rect.handleCollision(other.rect);\n    }\n  \n    /**\n     * Moves a wordBox by moving its rectangle\n     */\n    move() {\n      this.rect.move();\n    }\n  \n    /**\n     * Handle a wordBox collision with a boundary\n     * @param {Boundary} bound - boundary that is colliding with wordBox\n     */\n    handleBoundary(bound) {\n      this.rect.handleCollision(bound);\n    }\n  }\n  \n  class Rectangle {\n    /**\n     * Creates an instance of a Rectangle to contain wordBox\n     * @param {Integer} x - Left x offset\n     * @param {Integer} y - Top y offset\n     * @param {Integer} w - Width of rectangle\n     * @param {Integer} h - Height of rectangle\n     * @param {Boolean} isBiggest - Whether or not this rectangle is biggest of all\n     */\n    constructor(x,y,w,h,isBiggest) {\n      this.x = x;\n      this.y = y;\n      this.w = w;\n      this.h = h;\n      this.midX = x + w / 2;\n      this.midY = y + h / 2;\n      this.vx = 0;\n      this.vy = 0;\n      this.isBiggest = isBiggest\n    }\n  \n    /**\n     * Helper function to calculate area of rectangle\n     */\n    area() {\n      return this.w * this.h;\n    }\n  \n    /**\n     * Main render function to render a Rectangle instance\n     */\n    render() {\n      p.rect(this.x, this.y, this.w, this.h);\n    }\n  \n    /**\n     * Handles a collision with another rectangle\n     * - Collision algorithm is based on spring force\n     * - Sets delta x and delta y (how much to move)\n     * - Sets velocities of this and other rectangle\n     * @param {Recangle} other - other rectangle this rectangle is colliding with\n     */\n    handleCollision(other) {\n      if (!this.collides(other)) {\n        return\n      }\n\n      var spring = 0.5;\n      var force = 800000;\n      var sizeScale = 0.3;\n      var biggestScale = this.isBiggest == true ? 1/50000 : 1;\n\n      var dx = this.midX - other.midX,\n          dy = this.midY - other.midY;\n      var threshold = 1.0;\n      if (dx < threshold && dx >= 0) {\n        dx = threshold;\n      } else if (dx > -threshold && dx <= 0) {\n        dx = -threshold;\n      }\n      if (dy < threshold && dy >= 0) {\n        dy = threshold;\n      } else if (dy > -threshold && dy <= 0) {\n        dy = -threshold;\n      }\n  \n      // var constvx = force * spring * dx / distance / distance,\n      // \tconstvy = force * spring * dy / distance / distance;\n      var constvx = force * spring / dx, // Math.abs(dx),\n        constvy = force * spring / dy; // Math.abs(dy);\n  \n      var areaScale1 = p.pow(this.area(), sizeScale);\n      var areaScale2 = p.pow(other.area(), sizeScale);\n  \n      var max = 1;\n      this.vx += clampAbs(constvx / areaScale1 * biggestScale, max);\n      this.vy += clampAbs(constvy / areaScale1 * biggestScale, max);\n      other.vx -= clampAbs(constvx / areaScale2, max);\n      other.vy -= clampAbs(constvy / areaScale2, max);\n    }\n  \n    /**\n     * Adds an arbitrary inward force for aesthetic reasons (word cloud attraction toward center)\n     * - Adjusts velocity towards center based on constant force strength\n     */\n    addInwardsForce() {\n      var forceStrength = 0.0001;\n      var centerX = p.width / 2;\n      var centerY = p.height / 2;\n      var fX = centerX - this.midX;\n      var fY = centerY - this.midY;\n      this.vx += fX * forceStrength;\n      this.vy += fY * forceStrength;\n    }\n  \n    /**\n     * Main function to move a rectangle when a user drags the rectangle.\n     * - Resets position (x, y, midX, midY) based on velocities\n     * - Resets velocities based on drag\n     */\n    move() {\n      // this.addInwardsForce();\n      var drag = 0.4;\n      this.x += this.vx;\n      this.y += this.vy;\n      this.midX = this.x + this.w / 2;\n      this.midY = this.y + this.h / 2;\n      this.vx = this.vx * drag;\n      this.vy = this.vx * drag;\n    }\n  \n    /**\n     * Helper function to check if other rectangle collides with this one\n     * @param {Recangle} other - other rectangle to check agains\n     * @return {Boolean} - whether or not other rectangle collides with this one\n     */\n    collides(other) {\n      if (this.x < other.x + other.w && this.x + this.w > other.x &&\n            this.y < other.y + other.h && this.y + this.h > other.y) {\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Helper function to check if input x and y is in rectangle\n     * @param {Integer} x - x value to check in rectangle\n     * @param {Integer} y - y value to check in rectangle\n     * @return {Boolean} - whether or not x, y pair in rectangle\n     */\n    contains(x, y) {\n      if (x > this.x && x < this.x + this.w &&\n          y > this.y && y < this.y + this.h) {\n        return true;\n      }\n      return false;\n    }\n  }\n  \n  class InputHandler {\n    /**\n     * Creates an instance of InputHandler by initializing state/\n     * @param {Array<wordBox>} wordBoxes - array of word boxes user can click on\n     */\n    constructor(wordBoxes) {\n      this.wordBoxes = wordBoxes;\n      this.attachedBox = null;\n      this.xOffset = 0;\n      this.yOffset = 0;\n      this.clickX = 0;\n      this.clickY = 0;\n      this.isPressed = false;\n      this.clickThreshold = 2;\n    }\n  \n    /**\n     * Handles a mouse press event\n     * - Finds wordBox user may have clicked on\n     * - Resets x and y if the click event is within the box\n     */\n    mousePressed() {\n      for (var i = 0; i < this.wordBoxes.length; i++) {\n        if (this.wordBoxes[i].rect.contains(p.mouseX, p.mouseY)) {\n          this.attachedBox = this.wordBoxes[i];\n          this.xOffset = p.mouseX - this.wordBoxes[i].rect.x;\n          this.yOffset = p.mouseY - this.wordBoxes[i].rect.y;\n        }\n      }\n      this.isPressed = true;\n      this.clickX = p.mouseX;\n      this.clickY = p.mouseY;\n    }\n  \n    /**\n     * Handles a mouse release event\n     * - Calls mouseClicked() if the click event is within the threshold\n     */\n    mouseReleased() {\n      if (this.clickX - p.mouseX < this.clickThreshold && this.clickX - p.mouseX > -this.clickThreshold &&\n          this.clickY - p.mouseY < this.clickThreshold && this.clickY - p.mouseY > -this.clickThreshold) {\n        this.mouseClicked();\n      }\n      this.attachedBox = null;\n      this.isPressed = false;\n    }\n  \n    /**\n     * Handles a mouse click event\n     * - Update the sentiment chart based on the text the user clicked on\n     */\n    mouseClicked() {\n      if (this.attachedBox != null) {\n        this.updateSentimentChart();\n      }\n    }\n  \n    /**\n     * Handles the attached box. This function is called in main render() function\n     * - Adjust the attached box based on x and y offsets\n     */\n    handleAttachedBox() {\n      if (this.attachedBox == null) {\n        return;\n      }\n      this.attachedBox.rect.x = p.mouseX - this.xOffset;\n      this.attachedBox.rect.y = p.mouseY - this.yOffset;\n    }\n  \n    /**\n     * Updates the sentiment chart by dispatching an event to parent App.\n     * - Extract relevant text\n     * - Creates a new event object\n     * - Dispatches event object with relevant text set as value\n     */\n    updateSentimentChart() {\n      var val;\n      if (this.attachedBox == null) {\n        val = \"\";\n      } else {\n        val = this.attachedBox.text;\n      }\n\n      var input = document.getElementById(\"canvasForm\");\n      var nativeInputValueSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, \"value\").set;\n      nativeInputValueSetter.call(input, val);\n      var ev = new Event('input', { bubbles: true});\n      input.dispatchEvent(ev);\n    }\n  }\n  \n  /**\n   * Sets up canvas.\n   * - Initializes canvas size, text size, text alignment, options for a color base\n   * - Creates instance of wordCloud class using word frequency dictionary\n   * - Creates instance of InputHandler class using wordBoxes\n   */\n  p.setup = () => {\n    p.createCanvas(720, 400);\n    p.textSize(fontSize);\n    p.textAlign(p.LEFT, p.TOP);\n    p.textLeading(0);\n    colorBaseOptions = [\n      p.color(0, 51, 204),\n      p.color(51, 204, 51),\n      p.color(255, 153, 51),\n      p.color(153, 51, 255),\n      p.color(51, 204, 204)\n    ];\n    cloud = new wordCloud(props.dict);\n    //make sure to initialize inputHandler after wordCloud, should refactor this\n    ih = new InputHandler(cloud.wordBoxes);\n  }\n  \n  \n  /*\n   * Main draw function.\n   * - Sets background for canvas\n   * - Calls handleBoundary() and handleCollisions() on cloud instance\n   * - Calls handleAttachedBox() on InputHandler instance\n   * - Renders the cloud\n   */\n  p.draw = () => {\n    if (debug) {\n      p.noFill();\n      p.stroke(255, 128, 0);\n    } else {\n  \n    }\n    p.background(255);\n  \n    cloud.handleBoundary();\n    cloud.handleCollisions();\n    ih.handleAttachedBox();\n    cloud.render();\n  }\n  \n  /**\n   * Helper function to clamp value below a maximum value\n   * @param {Integer} val - value to clamp\n   * @param {Integer} max - maximum value val can be\n   */ \n  function clampAbs(val, max) {\n    var sign = (val < 0) ? -1 : 1;\n    var temp = (val < 0) ? -val : val;\n    if (temp > max) {\n      return sign * max;\n    } else {\n      return val;\n    }\n  }\n  \n  /**\n   * Handle mouse press by calling mousePressed() on the instance of InputHandler\n   */\n  p.mousePressed = () => {\n    ih.mousePressed();\n  }\n  \n  /**\n   * Handle mouse release by calling mouseReleased() on the instance of InputHandler\n   */\n  p.mouseReleased = () => {\n    ih.mouseReleased();\n  }\n}\n\nexport default sketch;\n","import React, { Component } from 'react';\nimport './App.css';\nimport {Bar} from 'react-chartjs-2';\n\n/**\n * ChartContainer - Component responsible for generating the sentiment analysis bar graph associated with each word on the word cloud.\n * Gets props passed down from App Component: word, ts, vote, s.\n */\nclass ChartContainer extends Component {\n  constructor(props){\n    super();\n  }\n\n  static defaultProps = {\n    displayTitle:true,\n    displayLegend: true,\n    legendPosition:'right',\n    word:'none'\n  }\n\n  /**\n   * RANGE CALCULATION: takes timeframe given by user's query and divides into 10 equal time ranges.\n   * @param {List} time - all the timestamps for when a word was commented\n   * @return {List} ranges - timestamp ranges evenly divided into 10 ranges.\n   */\n\n  getRanges(time){\n    var i;\n\n    var beg = time[0];\n    var end = time[time.length-1];\n    var totalRange = end - beg;\n\n    //round to nearest value divisible by 10 to get equal ranges\n    if((totalRange % 10) !== 0){\n      totalRange += (10-(totalRange%10));\n    }\n\n    var ranges = [];\n    ranges.length = 11;\n\n    ranges[0] = beg;\n    for(i = 1; i < ranges.length; i++){\n      ranges[i] = ranges[i-1] + (totalRange/10);\n    }\n\n    return ranges;\n  }\n\n  /**\n   * FREQUENCY AND SENTIMENT CALCULATION: iterates through all the timestamps associated with the word, and calculates two things--\n   * (1) number of time it appears within each time range; (2) average sentiment value for the word within each time range\n   * @param {List} time - all the timestamps for when a word was commented\n   * @param {List} votes - the number of up or downvotes the comment with the word at the time\n   * @param {List} sentiments - the sentiment value (ranging from -1 to 1) generated for the comment with the word\n   * @return {List} ans - an array holding two arrays-- (1) results for frequency; (2) results for average sentiments\n   * @this {ChartContainer}\n   */\n\n  getFrequencyandSentiment(time, votes, sentiments){\n      var i;\n\n      var ranges = this.getRanges(time);\n      var freq = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      var calcSent = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; //hold final calculations for sentiment values to be displayed\n\n\n      /**\n       * helper function sorting out which timestamp falls within which range, and calculates frequency and sentiment values respectively.\n       * @param {List} ranges - all the timestamps for when a word was commented\n       * @param {Number} t - time for when a word was commented\n       * @param {Number} v - the number of up or downvotes the comment with the word\n       * @param {Number} sc - the sentiment value (ranging from -1 to 1) generated for the comment with the word\n       */\n\n      function divideSegments(ranges, t, v, sc){\n        if(t >= ranges[0] && t < ranges[1]){\n          freq[0]++;\n          calcSent[0] += (sc*v)/Math.abs(v);\n        }\n        else if(t >= ranges[1] && t < ranges[2]){\n          freq[1]++;\n          calcSent[1] += (sc*v)/Math.abs(v);\n        }\n        else if(t >= ranges[2] && t < ranges[3]){\n          freq[2]++;\n          calcSent[2] += (sc*v)/Math.abs(v);\n        }\n        else if(t >= ranges[3] && t < ranges[4]){\n          freq[3]++;\n          calcSent[3] += (sc*v)/Math.abs(v);\n        }\n        else if(t >= ranges[4] && t < ranges[5]){\n          freq[4]++;\n          calcSent[4] += (sc*v)/Math.abs(v);\n        }\n        else if(t >= ranges[5] && t < ranges[6]){\n          freq[5]++;\n          calcSent[5] += (sc*v)/Math.abs(v);\n        }\n        else if(t >= ranges[6] && t < ranges[7]){\n          freq[6]++;\n          calcSent[6] += (sc*v)/Math.abs(v);\n        }\n        else if(t >= ranges[7] && t < ranges[8]){\n          freq[7]++;\n          calcSent[7] += (sc*v)/Math.abs(v);\n        }\n        else if(t >= ranges[8] && t < ranges[9]){\n          freq[8]++;\n          calcSent[8] += (sc*v)/Math.abs(v);\n        }\n        else if(t >= ranges[9] && t <= ranges[10]){\n          freq[9]++;\n          calcSent[9] += (sc*v)/Math.abs(v);\n        }\n\n      }\n\n      for(i = 0; i < time.length; i++){\n        divideSegments(ranges, time[i], votes[i], sentiments[i]);\n      }\n\n      //average out all the summed sentiments per range\n      for(i = 0; i < calcSent.length; i++){\n        calcSent[i] /= freq[i];\n      }\n\n      var ans = [freq, calcSent];\n      return ans;\n  }\n\n  /**\n   * DATE FORMATTING: converts UNIX timestamp into readable date format\n   * @param {List} time - all the timestamps for when a word was commented\n   * @return {List} convertedRange - reformatted time ranges\n   * @this {ChartContainer}\n   */\n\n  getDate(time){\n    var i;\n    var ranges = this.getRanges(time);\n\n    /**\n     * helper function to breakdown and reformat UNIX timestamp\n     * @param {Number} unix - =timestamp value\n     * @return {String} date - reformatted date\n     */\n\n    function tsConvert(unix){\n      var input = new Date(unix * 1000);\n      var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n      var year = input.getFullYear();\n      var month = months[input.getMonth()];\n      var date = input.getDate();\n      var hour = input.getHours();\n      var min = input.getMinutes();\n      var sec = input.getSeconds();\n\n      if(sec < 10){\n        sec = '0' + sec;\n      }\n\n      var date = month + ' ' + date + ', ' + year + ' ' + hour + ':' + min;\n      return date;\n    }\n\n    var convertedRange = [];\n    convertedRange.length = ranges.length;\n\n    for(i = 0; i < ranges.length; i++){\n      convertedRange[i] = tsConvert(ranges[i]);\n    }\n\n    return convertedRange.slice(0,10);\n  }\n\n  /**\n   * SENTIMENT COLOR ASSIGNMENT: assigns sentiment value for each time range to a color\n   * @return {List} colors - holds rgba values for each sentiment in a time range\n   * @this {ChartContainer}\n   */\n\n  getColors(){\n    var i;\n    var calcSent = this.getFrequencyandSentiment(this.props.ts, this.props.vote, this.props.s)[1];\n\n    var colors = [];\n    colors.length = calcSent.length;\n\n    /**\n     * helper function to assign colors for each sentiment range\n     * @param {Number} sent - sentiment value\n     */\n\n    function sentColor(sent){\n      if(sent <= -0.9){\n        return \"rgba(45, 6, 6, 1)\";\n      }\n      else if(sent > -0.9 && sent <= -0.8){\n        return \"rgba(62, 8, 8, 1)\";\n      }\n      else if(sent > -0.8 && sent <= -0.7){\n          return \"rgba(92, 10, 10, 1)\";\n      }\n      else if(sent > -0.7 && sent <= -0.6){\n        return \"rgba(112, 15, 15, 1)\";\n      }\n      else if(sent > -0.6 && sent <= -0.5){\n        return \"rgba(135, 18, 18, 1)\";\n      }\n      else if(sent > -0.5 && sent <= -0.4){\n          return \"rgba(157, 21, 21, 1)\";\n      }\n      else if(sent > -0.4 && sent <= -0.3){\n        return \"rgba(180, 24, 24, 1)\";\n      }\n      else if(sent > -0.3 && sent <= -0.2){\n          return \"rgba(202, 28, 28, 1)\";\n      }\n      else if(sent > -0.2 && sent <= -0.1){\n        return \"rgba(224, 31, 31, 1)\";\n      }\n      else if(sent > -0.1 && sent <= 0){\n          return \"rgba(234, 98, 98, 1)\";\n      }\n      else if(sent > 0 && sent <= 0.1){\n        return \"rgba(56, 132, 18, 1)\";\n      }\n      else if(sent > 0.1 && sent <= 0.2){\n          return \"rgba(171, 251, 132, 1)\";\n      }\n      else if(sent > 0.2 && sent <= 0.3){\n        return \"rgba(105, 247, 34, 1)\";\n      }\n      else if(sent > 0.3 && sent <= 0.4){\n          return \"rgba(79, 221, 8, 1)\";\n      }\n      else if(sent > 0.4 && sent <= 0.5){\n        return \"rgba(70, 197, 7, 1)\";\n      }\n      else if(sent > 0.5 && sent <= 0.6){\n          return \"rgba(62, 172, 6, 1)\";\n      }\n      else if(sent > 0.6 && sent <= 0.7){\n        return \"rgba(44, 124, 4, 1)\";\n      }\n      else if(sent > 0.7 && sent <= 0.8){\n          return \"rgba(35, 99, 3, 1)\";\n      }\n\n      else if(sent > 0.8 && sent <= 0.9){\n          return \"rgba(26, 75, 2, 1)\";\n      }\n      else if(sent > 0.9 && sent <= 1){\n        return \"rgba(17, 50, 1, 1)\";\n      }\n    }\n\n    for(i = 0; i < calcSent.length; i++){\n      colors[i] = sentColor(calcSent[i]);\n    }\n\n    return colors;\n\n  }\n\n  render() {\n    return (\n        <div className=\"chart\">\n          <Bar\n            data={{\n              labels: this.getDate(this.props.ts),\n              datasets:[\n                {\n                  label: this.props.word,\n                  data:this.getFrequencyandSentiment(this.props.ts, this.props.vote, this.props.s)[0],\n                  backgroundColor: this.getColors(),\n\n                }\n              ]\n            }}\n            options={{\n              title:{\n                display:this.props.displayTitle,\n                text: this.props.word,\n                fontSize:25\n              },\n              legend:{\n                display:this.props.displayLegend,\n                position:this.props.legendPosition\n              },\n              scales :{\n                xAxes: [{\n                  barPercentage: 1,\n                  categoryPercentage: 1\n              }]\n            }\n            }}\n          />\n      </div>\n    );\n  }\n}\n\nexport default ChartContainer;\n","import React, { Component } from 'react';\nimport p5 from 'p5';\n\nclass P5Wrapper extends Component {\n    /**\n     * Creates canvas by extracting from props\n     */ \n    componentDidMount() {\n      const { sketch, ...rest } = this.props;\n      this.canvas = new p5(sketch(rest), this.wrapper);\n    }\n  \n    /**\n     * Recreates canvas by removing old canvas and instantiates a new one.\n     * Only recreate canvas if props change.\n     */ \n    componentWillReceiveProps(newProps) {\n      const { sketch, ...rest } = newProps;\n      if (this.props.dict !== newProps.dict) {\n        this.canvas.remove();\n        this.canvas = new p5(newProps.sketch(rest), this.wrapper);\n      }\n  \n      if (typeof this.canvas.onNewProps === \"function\") {\n        this.canvas.onNewProps(newProps);\n      }\n    }\n  \n    /**\n     * Removes canvas when class unmounts.\n     */ \n    componentWillUnmount() {\n      this.canvas.remove();\n    }\n  \n    /**\n     * Main render function. Creates a reference to P5Wrapper.\n     */\n    render() {\n      return <div ref={(wrapper) => this.wrapper = wrapper} />;\n    }\n  }\n\nexport default P5Wrapper;\n","import React, { Component } from 'react';\nimport DatePicker from \"react-datepicker\";\nimport sketch from './sketch';\nimport ChartContainer from './ChartContainer';\nimport P5Wrapper from './P5Wrapper';\nimport { \n  Button, \n  Form, \n  FormGroup, \n  Input, \n  InputGroup, \n  InputGroupAddon, \n  InputGroupText \n} from 'reactstrap';\n\n\nimport './App.css';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst axios = require('axios');\n\nclass App extends Component {\n  /**\n   * Creates an instance of redditcloud application by initializing the state.\n   * All elements of the state are empty, except the word cloud initially has a title\n   * consisting of the application name, class, and creators of the application.\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      subreddit: \"\",\n      startDate: new Date(),\n      endDate: new Date(),\n      dateRange: [new Date(), new Date()],\n      word: \"\",\n      frequencies: {\n        \"RedditCloud\": 25,\n        \"CS130\": 15,\n        \"Kelvin Zhang\": 5,\n        \"Karen Zhang\": 5,\n        \"Vishaal Agartha\": 5,\n        \"CJ Ordog\": 5,\n        \"Anav Sanghvi\": 5,\n        \"Albert Pan\": 5\n      },\n      sentiments: {}\n    };\n\n    this.onChangeSubreddit = this.onChangeSubreddit.bind(this);\n    this.onChangeStartDate = this.onChangeStartDate.bind(this);\n    this.onChangeEndDate = this.onChangeEndDate.bind(this);\n    this.onChangeSentimentChart = this.onChangeSentimentChart.bind(this);\n  }\n\n  /**\n   * Changes state to new subreddit\n   * @param {Event} e - Contains the event with new subreddit name\n   */\n  onChangeSubreddit = (e) => {\n    this.setState({ subreddit: e.target.value });\n  }\n\n  /**\n   * Changes state to new start date\n   * @param {Date} date - Contains the date with new start date\n   */\n  onChangeStartDate = (date) => {\n    this.setState({ startDate: date });\n  }\n\n  /**\n   * Changes state to new end date\n   * @param {Date} date - Contains the date with new end date\n   */\n  onChangeEndDate = (date) => {\n    this.setState({ endDate: date });\n  }\n\n  /**\n   * Changes state to new word to be passed down to SentimentChart\n   * @param {Event} e - Contains the event with new word to analyze\n   */\n  onChangeSentimentChart = (e) => {\n    this.setState({ word: e.target.value });\n  }\n\n  /**\n   * Handles submission of form. Formats data and triggers an HTTP request\n   * to backend to obtain data for a certain word. Extracts sentiments and frequencies\n   * and assigns it to the state\n   * @param {Event} - Contains the submit event\n   */\n  onSubmit = (e) => {\n    e.preventDefault();\n\n\n    // Data consists of a subreddit of type String, start and end dates of type Integer\n    // (in Unix Timestamp format)\n    let data = JSON.stringify({\n      subreddit: this.state.subreddit,\n      start: parseInt((this.state.startDate.getTime() / 1000).toFixed(0)),\n      end: parseInt((this.state.endDate.getTime() / 1000).toFixed(0))\n    })\n\n    axios.post('http://18.223.169.36:80', data, {\n      headers: {\n        'Content-Type': 'application/json;charset=UTF-8',\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n      timeout: 600000\n    })\n    .then((res) => res.data)\n    .then((data) => {\n      // Extract data\n      var sentiments = Object.assign({}, ...data.map(({word, timestamps, score, vote}) => ({[word]: {timestamps, score, vote}})));\n      var frequencies = data.reduce((map, obj) => (map[obj.word] = obj.frequency, map), {});\n\n      this.setState({\n        sentiments: sentiments,\n        frequencies: frequencies\n      });\n    });\n  }\n\n  /**\n   * Main render function.\n   * - Contains P5Wrapper for WordCloud\n   * - Contains ChartContainer for SentimentChart\n   * - Handles form submission consisting of a subreddit name, start, and end dates\n   */\n  render() {\n    return (\n      <div className=\"App\">\n        <P5Wrapper sketch={sketch} dict={this.state.frequencies}/>\n          <Form onSubmit={this.onSubmit}>\n            <InputGroup size=\"sm\">\n              <InputGroupAddon addonType=\"prepend\">\n                <InputGroupText>r/ </InputGroupText>\n              </InputGroupAddon>\n              <Input \n                value={this.state.subreddit} \n                onChange={this.onChangeSubreddit} \n                placeholder={\"computerscience\"}\n                id=\"subreddit\"\n              />\n            </InputGroup>\n            <FormGroup>\n              <DatePicker\n                selected={this.state.startDate}\n                onChange={this.onChangeStartDate}\n                showTimeSelect\n                timeFormat=\"HH:mm\"\n                timeIntervals={10}\n                dateFormat=\"MM/d/yyyy h:mm aa\"\n              />\n              <DatePicker\n                selected={this.state.endDate}\n                onChange={this.onChangeEndDate}\n                showTimeSelect\n                timeFormat=\"HH:mm\"\n                timeIntervals={10}\n                dateFormat=\"MM/d/yyyy h:mm aa\"\n              />\n            </FormGroup>\n            <Button type=\"submit\" outline color=\"primary\" size=\"sm\">Cloudify</Button>\n          </Form>\n        <input style={{display:\"none\"}} id=\"canvasForm\" value=\"\" onChange={this.onChangeSentimentChart}/>\n        {typeof(this.state.sentiments[this.state.word]) !== \"undefined\" &&\n          <ChartContainer \n            word={this.state.word} \n            ts={this.state.sentiments[this.state.word].timestamps} \n            vote={this.state.sentiments[this.state.word].vote} \n            s={this.state.sentiments[this.state.word].score}\n          />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}