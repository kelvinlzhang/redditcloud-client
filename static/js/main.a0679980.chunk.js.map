{"version":3,"sources":["sketch.js","ChartContainer.js","P5Wrapper.js","App.js","index.js"],"names":["sketch","props","p","cloud","ih","colorBaseOptions","scalar","fontSize","minFontSize","spawnBoxSize","maxWords","colorMinOffset","colorMaxOffset","wordCloud","wordDict","Object","classCallCheck","this","wordBoxes","boundaries","Rectangle","width","height","baseColor","Math","floor","random","length","maxFreq","_arr","entries","_i","_ref5","_ref2","slicedToArray","freq","minFreq","sortable","sort","a","b","slice","count","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_ref6","value","_ref4","word","isBiggest","push","wordBox","getProceduralColor","err","return","createClass","key","i","render","j","handleCollision","move","handleBoundary","colorBase","min","max","color","procColorHelper","red","green","blue","val","temp","text","map","textSize","randX","randY","rect","textWidth","yOffset","fill","x","y","other","bound","w","h","midX","midY","vx","vy","collides","biggestScale","dx","dy","constvx","force","constvy","areaScale1","pow","area","areaScale2","clampAbs","centerX","centerY","fX","fY","InputHandler","attachedBox","xOffset","clickX","clickY","isPressed","clickThreshold","contains","mouseX","mouseY","mouseClicked","updateSentimentChart","input","document","getElementById","getOwnPropertyDescriptor","window","HTMLInputElement","prototype","set","call","ev","Event","bubbles","dispatchEvent","setup","createCanvas","textAlign","LEFT","TOP","textLeading","dict","draw","background","handleCollisions","handleAttachedBox","mousePressed","mouseReleased","ChartContainer","possibleConstructorReturn","getPrototypeOf","time","beg","totalRange","ranges","votes","sentiments","getRanges","calcSent","divideSegments","t","v","sc","abs","tsConvert","unix","Date","year","getFullYear","month","getMonth","date","getDate","hour","getHours","getMinutes","sec","getSeconds","convertedRange","sent","getFrequencyandSentiment","ts","vote","s","colors","react_default","createElement","className","react_chartjs_2_es","data","labels","datasets","label","backgroundColor","getColors","options","title","display","displayTitle","legend","displayLegend","position","legendPosition","scales","xAxes","barPercentage","categoryPercentage","Component","defaultProps","P5Wrapper","_this$props","rest","objectWithoutProperties","canvas","p5","wrapper","newProps","remove","onNewProps","_this","ref","axios","require","App","onChangeSubreddit","e","setState","subreddit","target","onChangeStartDate","startDate","onChangeEndDate","endDate","onChangeSentimentChart","onSubmit","preventDefault","JSON","stringify","state","start","parseInt","getTime","toFixed","end","post","headers","Content-Type","Access-Control-Allow-Origin","timeout","then","res","assign","apply","concat","toConsumableArray","_ref","timestamps","score","defineProperty","frequencies","reduce","obj","frequency","dateRange","RedditCloud","CS130","Kelvin Zhang","Karen Zhang","Vishaal Agartha","CJ Ordog","Anav Sanghvi","Albert Pan","bind","assertThisInitialized","src_P5Wrapper","reactstrap_es","size","addonType","onChange","placeholder","id","es","selected","showTimeSelect","timeFormat","timeIntervals","dateFormat","type","outline","style","src_ChartContainer","ReactDOM","src_App_0"],"mappings":"+SA6hBeA,EAzhBA,SAACC,GAAD,OAAW,SAACC,GACzB,IAaSC,EAMLC,EAnBAC,EAAmB,GAEnBC,EAAS,IAITC,EAAW,GACXC,EAAc,GAEdC,EAAe,GAEfC,EAAW,GAKXC,EAAiB,GACjBC,EAAiB,GAIfC,EAtByB,WA8B7B,SAAAA,EAAYC,GAAWC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAErBI,KAAKH,SAAWA,EAChBG,KAAKC,UAAY,GAkBjBD,KAAKE,WAAa,CAEhB,IAAIC,EAAUlB,EAAEmB,OAASnB,EAAEoB,OAAQpB,EAAEmB,MAAkB,EAAXnB,EAAEoB,QAE9C,IAAIF,GAAWlB,EAAEmB,OAAQnB,EAAEoB,OAAQpB,EAAEmB,MAAkB,EAAXnB,EAAEoB,QAE9C,IAAIF,EAAU,GAAIlB,EAAEoB,OAAQpB,EAAEmB,MAAOnB,EAAEoB,QAEvC,IAAIF,EAAU,EAAGlB,EAAEoB,OAAQpB,EAAEmB,MAAOnB,EAAEoB,SAMxC,IAHA,IAAIC,EAAYlB,EAAiBmB,KAAKC,MAAMD,KAAKE,SAAWrB,EAAiBsB,SAEzEC,EAAU,EAlCMC,EAmCOd,OAAOe,QAAQhB,GAA1CiB,EAAA,EAAAA,EAAAF,EAAAF,OAAAI,IAAqD,KAAAC,EAAAH,EAAAE,GAAAE,EAAAlB,OAAAmB,EAAA,EAAAnB,CAAAiB,EAAA,GAAnCG,GAAmCF,EAAA,GAAAA,EAAA,IAC/CE,EAAOP,IACTA,EAAUO,GAGd,IAIIC,EAJAC,EAAWtB,OAAOe,QAAQhB,GAC9BuB,EAASC,KAAK,SAASC,EAAGC,GACxB,OAAOA,EAAE,GAAKD,EAAE,KAIhBH,EADE1B,EAAW2B,EAASV,OACZ,EAEAU,EAAS3B,GAAU,GAE/B2B,EAAWA,EAASI,MAAM,EAAG/B,GAC7B,IAAIgC,EAAQ,EAnDQC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAoDpB,QAAAC,EAAAC,EAA2BX,EAA3BY,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAqC,KAAAU,EAAAN,EAAAO,MAAAC,EAAAxC,OAAAmB,EAAA,EAAAnB,CAAAsC,EAAA,GAAzBG,EAAyBD,EAAA,GAAnBpB,EAAmBoB,EAAA,GAC/BE,EAAqB,GAATf,EAChBA,IACAzB,KAAKC,UAAUwC,KAAK,IAAIC,EAAQH,EAAMrB,EAAMP,EAASQ,EACnDnB,KAAK2C,mBAAmBrC,EAAWZ,EAAgBC,GAAiB6C,KAxDpD,MAAAI,GAAAjB,GAAA,EAAAC,EAAAgB,EAAA,YAAAlB,GAAA,MAAAK,EAAAc,QAAAd,EAAAc,SAAA,WAAAlB,EAAA,MAAAC,IA9BO,OAAA9B,OAAAgD,EAAA,EAAAhD,CAAAF,EAAA,EAAAmD,IAAA,SAAAV,MAAA,WAgG3B,IAAK,IAAIW,EAAI,EAAGA,EAAIhD,KAAKC,UAAUS,OAAQsC,IACzChD,KAAKC,UAAU+C,GAAGC,WAjGO,CAAAF,IAAA,mBAAAV,MAAA,WA+G3B,IAAK,IAAIW,EAAI,EAAGA,EAAIhD,KAAKC,UAAUS,OAAQsC,IACzC,IAAK,IAAIE,EAAIF,EAAGE,EAAIlD,KAAKC,UAAUS,OAAQwC,IACrCF,GAAKE,GACTlD,KAAKC,UAAU+C,GAAGG,gBAAgBnD,KAAKC,UAAUiD,IAGrD,IAASF,EAAI,EAAGA,EAAIhD,KAAKC,UAAUS,OAAQsC,IACzChD,KAAKC,UAAU+C,GAAGI,SAtHO,CAAAL,IAAA,iBAAAV,MAAA,WA+H3B,IAAK,IAAIW,EAAI,EAAGA,EAAIhD,KAAKC,UAAUS,OAAQsC,IACzC,IAAK,IAAIE,EAAI,EAAGA,EAAIlD,KAAKE,WAAWQ,OAAQwC,IAC1ClD,KAAKC,UAAU+C,GAAGK,eAAerD,KAAKE,WAAWgD,MAjI1B,CAAAH,IAAA,qBAAAV,MAAA,SA6IViB,EAAWC,EAAKC,GACjC,OAAOvE,EAAEwE,MAAMzD,KAAK0D,gBAAgBzE,EAAE0E,IAAIL,GAAYC,EAAKC,GAC9CxD,KAAK0D,gBAAgBzE,EAAE2E,MAAMN,GAAYC,EAAKC,GAC9CxD,KAAK0D,gBAAgBzE,EAAE4E,KAAKP,GAAYC,EAAKC,MAhJ/B,CAAAT,IAAA,kBAAAV,MAAA,SA2JbyB,EAAKP,EAAKC,GACxB,IAAIO,EAAOD,EAAOvD,KAAKE,UAAiB,EAAJ+C,EAAc,EAAJD,GAAWC,EAEzD,OADAO,EAAOxD,KAAKC,MAAMuD,GAAQ,EAAIA,EAAOR,EAAMQ,EAAOR,OA7JvB3D,EAAA,GAkKzB8C,EAlKyB,WA8K7B,SAAAA,EAAYsB,EAAM9C,EAAMP,EAASQ,EAASsC,EAAOjB,GAAY1C,OAAAC,EAAA,EAAAD,CAAAE,KAAA0C,GAC3D1C,KAAKgE,KAAOA,EACZhE,KAAKwC,UAAYA,EACjBxC,KAAKkB,KAAOA,EACZlB,KAAKW,QAAUA,EACfX,KAAKmB,QAAUA,EACfnB,KAAKV,SAAWL,EAAEgF,KAAK/C,EAAOC,IAAUR,EAAUQ,GAAU,EAAG,EAAG5B,EAAaD,GAC/EL,EAAEiF,SAASlE,KAAKV,UAChB,IAAI6E,EAAQ5D,KAAKE,SAAWjB,EAAeA,EAAe,EACtD4E,EAAQ7D,KAAKE,SAAWjB,EAAeA,EAAe,EAC1DQ,KAAKqE,KAAO,IAAIlE,EAAUlB,EAAEmB,MAAQ,EAAInB,EAAEqF,UAAUN,GAAQ,EAAIG,EAClDlF,EAAEoB,OAAS,EAAI+D,EACfnF,EAAEqF,UAAUN,GACZhE,KAAKV,SAAWD,EAChBmD,GACdxC,KAAKuE,QAAUvE,KAAKV,UAAY,EAAID,GACpCW,KAAKyD,MAAQA,EA9Lc,OAAA3D,OAAAgD,EAAA,EAAAhD,CAAA4C,EAAA,EAAAK,IAAA,SAAAV,MAAA,WAuM3BpD,EAAEiF,SAASlE,KAAKV,UAChBL,EAAEuF,KAAKxE,KAAKyD,OACZxE,EAAE+E,KAAKhE,KAAKgE,KAAMhE,KAAKqE,KAAKI,EAAGzE,KAAKqE,KAAKK,EAAI1E,KAAKuE,WAzMvB,CAAAxB,IAAA,kBAAAV,MAAA,SAmNbsC,GACd3E,KAAKqE,KAAKlB,gBAAgBwB,EAAMN,QApNL,CAAAtB,IAAA,OAAAV,MAAA,WA2N3BrC,KAAKqE,KAAKjB,SA3NiB,CAAAL,IAAA,iBAAAV,MAAA,SAkOduC,GACb5E,KAAKqE,KAAKlB,gBAAgByB,OAnOClC,EAAA,GAuOzBvC,EAvOyB,WAgP7B,SAAAA,EAAYsE,EAAEC,EAAEG,EAAEC,EAAEtC,GAAY1C,OAAAC,EAAA,EAAAD,CAAAE,KAAAG,GAC9BH,KAAKyE,EAAIA,EACTzE,KAAK0E,EAAIA,EACT1E,KAAK6E,EAAIA,EACT7E,KAAK8E,EAAIA,EACT9E,KAAK+E,KAAON,EAAII,EAAI,EACpB7E,KAAKgF,KAAON,EAAII,EAAI,EACpB9E,KAAKiF,GAAK,EACVjF,KAAKkF,GAAK,EACVlF,KAAKwC,UAAYA,EAzPU,OAAA1C,OAAAgD,EAAA,EAAAhD,CAAAK,EAAA,EAAA4C,IAAA,OAAAV,MAAA,WAgQ3B,OAAOrC,KAAK6E,EAAI7E,KAAK8E,IAhQM,CAAA/B,IAAA,SAAAV,MAAA,WAuQ3BpD,EAAEoF,KAAKrE,KAAKyE,EAAGzE,KAAK0E,EAAG1E,KAAK6E,EAAG7E,KAAK8E,KAvQT,CAAA/B,IAAA,kBAAAV,MAAA,SAiRbsC,GACd,GAAK3E,KAAKmF,SAASR,GAAnB,CAIA,IAGIS,EAAiC,GAAlBpF,KAAKwC,UAAoB,KAAU,EAElD6C,EAAKrF,KAAK+E,KAAOJ,EAAMI,KACvBO,EAAKtF,KAAKgF,KAAOL,EAAMK,KAEvBK,EADY,GACMA,GAAM,EAC1BA,EAFc,EAGLA,GAHK,GAGcA,GAAM,IAClCA,GAJc,GAMZC,EANY,GAMMA,GAAM,EAC1BA,EAPc,EAQLA,GARK,GAQcA,GAAM,IAClCA,GATc,GAchB,IAAIC,EAAUC,IAAiBH,EAC7BI,EAAUD,IAAiBF,EAEzBI,EAAazG,EAAE0G,IAAI3F,KAAK4F,OAtBZ,IAuBZC,EAAa5G,EAAE0G,IAAIhB,EAAMiB,OAvBb,IA0BhB5F,KAAKiF,IAAMa,EAASP,EAAUG,EAAaN,EADjC,GAEVpF,KAAKkF,IAAMY,EAASL,EAAUC,EAAaN,EAFjC,GAGVT,EAAMM,IAAMa,EAASP,EAAUM,EAHrB,GAIVlB,EAAMO,IAAMY,EAASL,EAAUI,EAJrB,MAjTiB,CAAA9C,IAAA,kBAAAV,MAAA,WA6T3B,IACI0D,EAAU9G,EAAEmB,MAAQ,EACpB4F,EAAU/G,EAAEoB,OAAS,EACrB4F,EAAKF,EAAU/F,KAAK+E,KACpBmB,EAAKF,EAAUhG,KAAKgF,KACxBhF,KAAKiF,IALe,KAKTgB,EACXjG,KAAKkF,IANe,KAMTgB,IAnUgB,CAAAnD,IAAA,OAAAV,MAAA,WA8U3BrC,KAAKyE,GAAKzE,KAAKiF,GACfjF,KAAK0E,GAAK1E,KAAKkF,GACflF,KAAK+E,KAAO/E,KAAKyE,EAAIzE,KAAK6E,EAAI,EAC9B7E,KAAKgF,KAAOhF,KAAK0E,EAAI1E,KAAK8E,EAAI,EAC9B9E,KAAKiF,GALM,GAKDjF,KAAKiF,GACfjF,KAAKkF,GANM,GAMDlF,KAAKiF,KAnVY,CAAAlC,IAAA,WAAAV,MAAA,SA2VpBsC,GACP,OAAI3E,KAAKyE,EAAIE,EAAMF,EAAIE,EAAME,GAAK7E,KAAKyE,EAAIzE,KAAK6E,EAAIF,EAAMF,GACpDzE,KAAK0E,EAAIC,EAAMD,EAAIC,EAAMG,GAAK9E,KAAK0E,EAAI1E,KAAK8E,EAAIH,EAAMD,IA7VjC,CAAA3B,IAAA,WAAAV,MAAA,SAyWpBoC,EAAGC,GACV,OAAID,EAAIzE,KAAKyE,GAAKA,EAAIzE,KAAKyE,EAAIzE,KAAK6E,GAChCH,EAAI1E,KAAK0E,GAAKA,EAAI1E,KAAK0E,EAAI1E,KAAK8E,MA3WT3E,EAAA,GAkXzBgG,EAlXyB,WAuX7B,SAAAA,EAAYlG,GAAYH,OAAAC,EAAA,EAAAD,CAAAE,KAAAmG,GACtBnG,KAAKC,UAAYA,EACjBD,KAAKoG,YAAc,KACnBpG,KAAKqG,QAAU,EACfrG,KAAKuE,QAAU,EACfvE,KAAKsG,OAAS,EACdtG,KAAKuG,OAAS,EACdvG,KAAKwG,WAAY,EACjBxG,KAAKyG,eAAiB,EA/XK,OAAA3G,OAAAgD,EAAA,EAAAhD,CAAAqG,EAAA,EAAApD,IAAA,eAAAV,MAAA,WAwY3B,IAAK,IAAIW,EAAI,EAAGA,EAAIhD,KAAKC,UAAUS,OAAQsC,IACrChD,KAAKC,UAAU+C,GAAGqB,KAAKqC,SAASzH,EAAE0H,OAAQ1H,EAAE2H,UAC9C5G,KAAKoG,YAAcpG,KAAKC,UAAU+C,GAClChD,KAAKqG,QAAUpH,EAAE0H,OAAS3G,KAAKC,UAAU+C,GAAGqB,KAAKI,EACjDzE,KAAKuE,QAAUtF,EAAE2H,OAAS5G,KAAKC,UAAU+C,GAAGqB,KAAKK,GAGrD1E,KAAKwG,WAAY,EACjBxG,KAAKsG,OAASrH,EAAE0H,OAChB3G,KAAKuG,OAAStH,EAAE2H,SAjZW,CAAA7D,IAAA,gBAAAV,MAAA,WAyZvBrC,KAAKsG,OAASrH,EAAE0H,OAAS3G,KAAKyG,gBAAkBzG,KAAKsG,OAASrH,EAAE0H,QAAU3G,KAAKyG,gBAC/EzG,KAAKuG,OAAStH,EAAE2H,OAAS5G,KAAKyG,gBAAkBzG,KAAKuG,OAAStH,EAAE2H,QAAU5G,KAAKyG,gBACjFzG,KAAK6G,eAEP7G,KAAKoG,YAAc,KACnBpG,KAAKwG,WAAY,IA9ZU,CAAAzD,IAAA,eAAAV,MAAA,WAsaH,MAApBrC,KAAKoG,aACPpG,KAAK8G,yBAvaoB,CAAA/D,IAAA,oBAAAV,MAAA,WAgbH,MAApBrC,KAAKoG,cAGTpG,KAAKoG,YAAY/B,KAAKI,EAAIxF,EAAE0H,OAAS3G,KAAKqG,QAC1CrG,KAAKoG,YAAY/B,KAAKK,EAAIzF,EAAE2H,OAAS5G,KAAKuE,WApbf,CAAAxB,IAAA,uBAAAV,MAAA,WA8b3B,IAAIyB,EAEFA,EADsB,MAApB9D,KAAKoG,YACD,GAEApG,KAAKoG,YAAYpC,KAGzB,IAAI+C,EAAQC,SAASC,eAAe,cACPnH,OAAOoH,yBAAyBC,OAAOC,iBAAiBC,UAAW,SAASC,IAClFC,KAAKR,EAAOjD,GACnC,IAAI0D,EAAK,IAAIC,MAAM,QAAS,CAAEC,SAAS,IACvCX,EAAMY,cAAcH,OAzcOrB,EAAA,GAggB/B,SAASL,EAAShC,EAAKN,GAGrB,OADYM,EAAM,GAAMA,EAAMA,GACnBN,GAFCM,EAAM,GAAM,EAAI,GAGZN,EAEPM,EAnDX7E,EAAE2I,MAAQ,WACR3I,EAAE4I,aAAa,IAAK,KACpB5I,EAAEiF,SAAS5E,GACXL,EAAE6I,UAAU7I,EAAE8I,KAAM9I,EAAE+I,KACtB/I,EAAEgJ,YAAY,GACd7I,EAAmB,CACjBH,EAAEwE,MAAM,EAAG,GAAI,KACfxE,EAAEwE,MAAM,GAAI,IAAK,IACjBxE,EAAEwE,MAAM,IAAK,IAAK,IAClBxE,EAAEwE,MAAM,IAAK,GAAI,KACjBxE,EAAEwE,MAAM,GAAI,IAAK,MAEnBvE,EAAQ,IAAIU,EAAUZ,EAAMkJ,MAE5B/I,EAAK,IAAIgH,EAAajH,EAAMe,YAW9BhB,EAAEkJ,KAAO,WAOPlJ,EAAEmJ,WAAW,KAEblJ,EAAMmE,iBACNnE,EAAMmJ,mBACNlJ,EAAGmJ,oBACHpJ,EAAM+D,UAqBRhE,EAAEsJ,aAAe,WACfpJ,EAAGoJ,gBAMLtJ,EAAEuJ,cAAgB,WAChBrJ,EAAGqJ,qCCjhBDC,cACJ,SAAAA,EAAYzJ,GAAO,OAAAc,OAAAC,EAAA,EAAAD,CAAAE,KAAAyI,GAAA3I,OAAA4I,EAAA,EAAA5I,CAAAE,KAAAF,OAAA6I,EAAA,EAAA7I,CAAA2I,GAAAlB,KAAAvH,8EAiBT4I,GACR,IAAI5F,EAEA6F,EAAMD,EAAK,GAEXE,EADMF,EAAKA,EAAKlI,OAAO,GACJmI,EAGnBC,EAAa,KAAQ,IACvBA,GAAe,GAAIA,EAAW,IAGhC,IAAIC,EAAS,GAIb,IAHAA,EAAOrI,OAAS,GAEhBqI,EAAO,GAAKF,EACR7F,EAAI,EAAGA,EAAI+F,EAAOrI,OAAQsC,IAC5B+F,EAAO/F,GAAK+F,EAAO/F,EAAE,GAAM8F,EAAW,GAGxC,OAAOC,mDAagBH,EAAMI,EAAOC,GAClC,IAAIjG,EAEA+F,EAAS/I,KAAKkJ,UAAUN,GACxB1H,EAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnCiI,EAAW,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAW3C,SAASC,EAAeL,EAAQM,EAAGC,EAAGC,GACjCF,GAAKN,EAAO,IAAMM,EAAIN,EAAO,IAC9B7H,EAAK,KACLiI,EAAS,IAAOI,EAAGD,EAAG/I,KAAKiJ,IAAIF,IAEzBD,GAAKN,EAAO,IAAMM,EAAIN,EAAO,IACnC7H,EAAK,KACLiI,EAAS,IAAOI,EAAGD,EAAG/I,KAAKiJ,IAAIF,IAEzBD,GAAKN,EAAO,IAAMM,EAAIN,EAAO,IACnC7H,EAAK,KACLiI,EAAS,IAAOI,EAAGD,EAAG/I,KAAKiJ,IAAIF,IAEzBD,GAAKN,EAAO,IAAMM,EAAIN,EAAO,IACnC7H,EAAK,KACLiI,EAAS,IAAOI,EAAGD,EAAG/I,KAAKiJ,IAAIF,IAEzBD,GAAKN,EAAO,IAAMM,EAAIN,EAAO,IACnC7H,EAAK,KACLiI,EAAS,IAAOI,EAAGD,EAAG/I,KAAKiJ,IAAIF,IAEzBD,GAAKN,EAAO,IAAMM,EAAIN,EAAO,IACnC7H,EAAK,KACLiI,EAAS,IAAOI,EAAGD,EAAG/I,KAAKiJ,IAAIF,IAEzBD,GAAKN,EAAO,IAAMM,EAAIN,EAAO,IACnC7H,EAAK,KACLiI,EAAS,IAAOI,EAAGD,EAAG/I,KAAKiJ,IAAIF,IAEzBD,GAAKN,EAAO,IAAMM,EAAIN,EAAO,IACnC7H,EAAK,KACLiI,EAAS,IAAOI,EAAGD,EAAG/I,KAAKiJ,IAAIF,IAEzBD,GAAKN,EAAO,IAAMM,EAAIN,EAAO,IACnC7H,EAAK,KACLiI,EAAS,IAAOI,EAAGD,EAAG/I,KAAKiJ,IAAIF,IAEzBD,GAAKN,EAAO,IAAMM,GAAKN,EAAO,MACpC7H,EAAK,KACLiI,EAAS,IAAOI,EAAGD,EAAG/I,KAAKiJ,IAAIF,IAKnC,IAAItG,EAAI,EAAGA,EAAI4F,EAAKlI,OAAQsC,IAC1BoG,EAAeL,EAAQH,EAAK5F,GAAIgG,EAAMhG,GAAIiG,EAAWjG,IAIvD,IAAIA,EAAI,EAAGA,EAAImG,EAASzI,OAAQsC,IAC9BmG,EAASnG,IAAM9B,EAAK8B,GAItB,MADU,CAAC9B,EAAMiI,mCAWbP,GACN,IAAI5F,EACA+F,EAAS/I,KAAKkJ,UAAUN,GAQ5B,SAASa,EAAUC,GACjB,IAAI3C,EAAQ,IAAI4C,KAAY,IAAPD,GAEjBE,EAAO7C,EAAM8C,cACbC,EAFS,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAE7D/C,EAAMgD,YACrBC,EAAOjD,EAAMkD,UACbC,EAAOnD,EAAMoD,WACb5G,EAAMwD,EAAMqD,aACZC,EAAMtD,EAAMuD,aAOhB,OALGD,EAAM,KACPA,EAAM,IAAMA,GAGVL,EAAOF,EAAQ,IAAME,EAAO,KAAOJ,EAAO,IAAMM,EAAO,IAAM3G,EAInE,IAAIgH,EAAiB,GAGrB,IAFAA,EAAe7J,OAASqI,EAAOrI,OAE3BsC,EAAI,EAAGA,EAAI+F,EAAOrI,OAAQsC,IAC5BuH,EAAevH,GAAKyG,EAAUV,EAAO/F,IAGvC,OAAOuH,EAAe/I,MAAM,EAAE,wCAU9B,IAAIwB,EAWewH,EAVfrB,EAAWnJ,KAAKyK,yBAAyBzK,KAAKhB,MAAM0L,GAAI1K,KAAKhB,MAAM2L,KAAM3K,KAAKhB,MAAM4L,GAAG,GAEvFC,EAAS,GAwEb,IAvEAA,EAAOnK,OAASyI,EAASzI,OAuErBsC,EAAI,EAAGA,EAAImG,EAASzI,OAAQsC,IAC9B6H,EAAO7H,IAjEUwH,EAiEKrB,EAASnG,MAhEnB,GACH,oBAEDwH,GAAQ,IAAOA,IAAS,GACvB,oBAEDA,GAAQ,IAAOA,IAAS,GACrB,sBAEHA,GAAQ,IAAOA,IAAS,GACvB,uBAEDA,GAAQ,IAAOA,IAAS,GACvB,uBAEDA,GAAQ,IAAOA,IAAS,GACrB,uBAEHA,GAAQ,IAAOA,IAAS,GACvB,uBAEDA,GAAQ,IAAOA,IAAS,GACrB,uBAEHA,GAAQ,IAAOA,IAAS,GACvB,uBAEDA,GAAQ,IAAOA,GAAQ,EACpB,uBAEHA,EAAO,GAAKA,GAAQ,GACnB,uBAEDA,EAAO,IAAOA,GAAQ,GACnB,yBAEHA,EAAO,IAAOA,GAAQ,GACrB,wBAEDA,EAAO,IAAOA,GAAQ,GACnB,sBAEHA,EAAO,IAAOA,GAAQ,GACrB,sBAEDA,EAAO,IAAOA,GAAQ,GACnB,sBAEHA,EAAO,IAAOA,GAAQ,GACrB,sBAEDA,EAAO,IAAOA,GAAQ,GACnB,qBAGHA,EAAO,IAAOA,GAAQ,GACnB,qBAEHA,EAAO,IAAOA,GAAQ,EACrB,0BADJ,EASP,OAAOK,mCAKP,OACIC,EAAAxJ,EAAAyJ,cAAA,OAAKC,UAAU,SACbF,EAAAxJ,EAAAyJ,cAACE,EAAA,EAAD,CACEC,KAAM,CACJC,OAAQnL,KAAKiK,QAAQjK,KAAKhB,MAAM0L,IAChCU,SAAS,CACP,CACEC,MAAOrL,KAAKhB,MAAMuD,KAClB2I,KAAKlL,KAAKyK,yBAAyBzK,KAAKhB,MAAM0L,GAAI1K,KAAKhB,MAAM2L,KAAM3K,KAAKhB,MAAM4L,GAAG,GACjFU,gBAAiBtL,KAAKuL,eAK5BC,QAAS,CACPC,MAAM,CACJC,QAAQ1L,KAAKhB,MAAM2M,aACnB3H,KAAMhE,KAAKhB,MAAMuD,KACjBjD,SAAS,IAEXsM,OAAO,CACLF,QAAQ1L,KAAKhB,MAAM6M,cACnBC,SAAS9L,KAAKhB,MAAM+M,gBAEtBC,OAAQ,CACNC,MAAO,CAAC,CACNC,cAAe,EACfC,mBAAoB,gBA/RTC,aAAvB3D,EAKG4D,aAAe,CACpBV,cAAa,EACbE,eAAe,EACfE,eAAe,QACfxJ,KAAK,QAgSMkG,iCCtQA6D,8LApCS,IAAAC,EACUvM,KAAKhB,MAAzBD,EADUwN,EACVxN,OAAWyN,EADD1M,OAAA2M,EAAA,EAAA3M,CAAAyM,EAAA,YAElBvM,KAAK0M,OAAS,IAAIC,IAAG5N,EAAOyN,GAAOxM,KAAK4M,2DAOhBC,GACIA,EAApB9N,OAD0B,IACfyN,EADe1M,OAAA2M,EAAA,EAAA3M,CACN+M,EADM,YAE9B7M,KAAKhB,MAAMkJ,OAAS2E,EAAS3E,OAC/BlI,KAAK0M,OAAOI,SACZ9M,KAAK0M,OAAS,IAAIC,IAAGE,EAAS9N,OAAOyN,GAAOxM,KAAK4M,UAGb,oBAA3B5M,KAAK0M,OAAOK,YACrB/M,KAAK0M,OAAOK,WAAWF,kDAQzB7M,KAAK0M,OAAOI,0CAML,IAAAE,EAAAhN,KACP,OAAO8K,EAAAxJ,EAAAyJ,cAAA,OAAKkC,IAAK,SAACL,GAAD,OAAaI,EAAKJ,QAAUA,YApC3BR,qBCgBlBc,UAAQC,EAAQ,MAkKPC,cAzJb,SAAAA,EAAYpO,GAAO,IAAAgO,EAAA,OAAAlN,OAAAC,EAAA,EAAAD,CAAAE,KAAAoN,IACjBJ,EAAAlN,OAAA4I,EAAA,EAAA5I,CAAAE,KAAAF,OAAA6I,EAAA,EAAA7I,CAAAsN,GAAA7F,KAAAvH,KAAMhB,KA8BRqO,kBAAoB,SAACC,GACnBN,EAAKO,SAAS,CAAEC,UAAWF,EAAEG,OAAOpL,SAhCnB2K,EAuCnBU,kBAAoB,SAAC1D,GACnBgD,EAAKO,SAAS,CAAEI,UAAW3D,KAxCVgD,EA+CnBY,gBAAkB,SAAC5D,GACjBgD,EAAKO,SAAS,CAAEM,QAAS7D,KAhDRgD,EAuDnBc,uBAAyB,SAACR,GACxBN,EAAKO,SAAS,CAAEhL,KAAM+K,EAAEG,OAAOpL,SAxDd2K,EAiEnBe,SAAW,SAACT,GACVA,EAAEU,iBAKF,IAAI9C,EAAO+C,KAAKC,UAAU,CACxBV,UAAWR,EAAKmB,MAAMX,UACtBY,MAAOC,UAAUrB,EAAKmB,MAAMR,UAAUW,UAAY,KAAMC,QAAQ,IAChEC,IAAKH,UAAUrB,EAAKmB,MAAMN,QAAQS,UAAY,KAAMC,QAAQ,MAG9DrB,EAAMuB,KAAK,wBAAyBvD,EAAM,CACxCwD,QAAS,CACPC,eAAgB,iCAChBC,8BAA+B,KAEjCC,QAAS,MAEVC,KAAK,SAACC,GAAD,OAASA,EAAI7D,OAClB4D,KAAK,SAAC5D,GAEL,IAAIjC,EAAanJ,OAAOkP,OAAPC,MAAAnP,OAAM,CAAQ,IAARoP,OAAApP,OAAAqP,EAAA,EAAArP,CAAeoL,EAAKjH,IAAI,SAAAmL,GAAA,IAAE7M,EAAF6M,EAAE7M,KAAM8M,EAARD,EAAQC,WAAYC,EAApBF,EAAoBE,MAAO3E,EAA3ByE,EAA2BzE,KAA3B,OAAA7K,OAAAyP,EAAA,EAAAzP,CAAA,GAAwCyC,EAAO,CAAC8M,aAAYC,QAAO3E,cAC9G6E,EAActE,EAAKuE,OAAO,SAACxL,EAAKyL,GAAN,OAAezL,EAAIyL,EAAInN,MAAQmN,EAAIC,UAAW1L,GAAM,IAElF+I,EAAKO,SAAS,CACZtE,WAAYA,EACZuG,YAAaA,OA1FjBxC,EAAKmB,MAAQ,CACXX,UAAW,GACXG,UAAW,IAAIhE,KACfkE,QAAS,IAAIlE,KACbiG,UAAW,CAAC,IAAIjG,KAAQ,IAAIA,MAC5BpH,KAAM,GACNiN,YAAa,CACXK,YAAe,GACfC,MAAS,GACTC,eAAgB,EAChBC,cAAe,EACfC,kBAAmB,EACnBC,WAAY,EACZC,eAAgB,EAChBC,aAAc,GAEhBnH,WAAY,IAGd+D,EAAKK,kBAAoBL,EAAKK,kBAAkBgD,KAAvBvQ,OAAAwQ,EAAA,EAAAxQ,QAAAwQ,EAAA,EAAAxQ,CAAAkN,KACzBA,EAAKU,kBAAoBV,EAAKU,kBAAkB2C,KAAvBvQ,OAAAwQ,EAAA,EAAAxQ,QAAAwQ,EAAA,EAAAxQ,CAAAkN,KACzBA,EAAKY,gBAAkBZ,EAAKY,gBAAgByC,KAArBvQ,OAAAwQ,EAAA,EAAAxQ,QAAAwQ,EAAA,EAAAxQ,CAAAkN,KACvBA,EAAKc,uBAAyBd,EAAKc,uBAAuBuC,KAA5BvQ,OAAAwQ,EAAA,EAAAxQ,QAAAwQ,EAAA,EAAAxQ,CAAAkN,KAxBbA,wEAwGjB,OACElC,EAAAxJ,EAAAyJ,cAAA,OAAKC,UAAU,OACbF,EAAAxJ,EAAAyJ,cAACwF,EAAD,CAAWxR,OAAQA,EAAQmJ,KAAMlI,KAAKmO,MAAMqB,cAC1C1E,EAAAxJ,EAAAyJ,cAACyF,EAAA,EAAD,CAAMzC,SAAU/N,KAAK+N,UACnBjD,EAAAxJ,EAAAyJ,cAACyF,EAAA,EAAD,CAAYC,KAAK,MACf3F,EAAAxJ,EAAAyJ,cAACyF,EAAA,EAAD,CAAiBE,UAAU,WACzB5F,EAAAxJ,EAAAyJ,cAACyF,EAAA,EAAD,aAEF1F,EAAAxJ,EAAAyJ,cAACyF,EAAA,EAAD,CACEnO,MAAOrC,KAAKmO,MAAMX,UAClBmD,SAAU3Q,KAAKqN,kBACfuD,YAAa,kBACbC,GAAG,eAGP/F,EAAAxJ,EAAAyJ,cAACyF,EAAA,EAAD,KACE1F,EAAAxJ,EAAAyJ,cAAC+F,EAAA,EAAD,CACEC,SAAU/Q,KAAKmO,MAAMR,UACrBgD,SAAU3Q,KAAK0N,kBACfsD,gBAAc,EACdC,WAAW,QACXC,cAAe,GACfC,WAAW,sBAEbrG,EAAAxJ,EAAAyJ,cAAC+F,EAAA,EAAD,CACEC,SAAU/Q,KAAKmO,MAAMN,QACrB8C,SAAU3Q,KAAK4N,gBACfoD,gBAAc,EACdC,WAAW,QACXC,cAAe,GACfC,WAAW,uBAGfrG,EAAAxJ,EAAAyJ,cAACyF,EAAA,EAAD,CAAQY,KAAK,SAASC,SAAO,EAAC5N,MAAM,UAAUgN,KAAK,MAAnD,aAEJ3F,EAAAxJ,EAAAyJ,cAAA,SAAOuG,MAAO,CAAC5F,QAAQ,QAASmF,GAAG,aAAaxO,MAAM,GAAGsO,SAAU3Q,KAAK8N,yBACpB,qBAA5C9N,KAAKmO,MAAMlF,WAAWjJ,KAAKmO,MAAM5L,OACvCuI,EAAAxJ,EAAAyJ,cAACwG,EAAD,CACEhP,KAAMvC,KAAKmO,MAAM5L,KACjBmI,GAAI1K,KAAKmO,MAAMlF,WAAWjJ,KAAKmO,MAAM5L,MAAM8M,WAC3C1E,KAAM3K,KAAKmO,MAAMlF,WAAWjJ,KAAKmO,MAAM5L,MAAMoI,KAC7CC,EAAG5K,KAAKmO,MAAMlF,WAAWjJ,KAAKmO,MAAM5L,MAAM+M,gBAxJpClD,oBCdlBoF,IAASvO,OAAO6H,EAAAxJ,EAAAyJ,cAAC0G,EAAD,MAASzK,SAASC,eAAe","file":"static/js/main.a0679980.chunk.js","sourcesContent":["/**\r\n * Main sketch function. Sketches the entire word cloud.\r\n * @param {Object} props - Object containing frequency dictionary\r\n */ \r\nconst sketch = (props) => (p) => { \r\n  var colorBaseOptions = [];\r\n  \r\n  var scalar = 0.82; // Different for each font\r\n  var debug = false;\r\n  \r\n  var font,\r\n      fontSize = 80,\r\n      minFontSize = 12;\r\n  \r\n  var spawnBoxSize = 50;\r\n\r\n  var maxWords = 40;\r\n    \r\n  var x,y, cloud;\r\n  \r\n  var numColors = 10;\r\n  var colorMinOffset = 10;\r\n  var colorMaxOffset = 65;\r\n  \r\n  var ih;\r\n  \r\n  class wordCloud {\r\n    /**\r\n     * Creates an instance of the wordCloud.\r\n     * - Defines boundaries for the canvas.\r\n     * - Sorts words by frequencies\r\n     * - Creates wordBoxes based on frequency and randomly assigns colors \r\n     * @param {Object} wordDict - Object containing frequency dictionary\r\n     */\r\n    constructor(wordDict) {\r\n    \r\n      this.wordDict = wordDict;\r\n      this.wordBoxes = [];\r\n      /*\r\n        boundaries are much bigger than necessary to ensure that \r\n        no words exit the screen by jumping over or through a boundary\r\n  \r\n        (0,0)\r\n      |--------|--------|--------|\r\n      |        |   b3   |        |\r\n      |        |        |        |\r\n      |        |--------|        |\r\n      |   b2   | canvas |   b1   |\r\n      |        |        |        |\r\n      |        |--------|        |\r\n      |        |   b4   |        |\r\n      |        |        |        |\r\n      |--------|--------|--------|\r\n                    (width, height)\r\n      */\r\n      this.boundaries = [\r\n        //b1\r\n        new Rectangle(p.width,  -p.height, p.width, p.height * 3),\r\n        //b2\r\n        new Rectangle(-p.width, -p.height, p.width, p.height * 3),\r\n        //b3\r\n        new Rectangle(0, -p.height, p.width, p.height),\r\n        //b4\r\n        new Rectangle(0, p.height, p.width, p.height)\r\n      ];\r\n  \r\n      var baseColor = colorBaseOptions[Math.floor(Math.random() * colorBaseOptions.length)];\r\n  \r\n      var maxFreq = 0;\r\n      for (const [word, freq] of Object.entries(wordDict)) {\r\n        if (freq > maxFreq) {\r\n          maxFreq = freq;\r\n        }\r\n      }\r\n      var sortable = Object.entries(wordDict);\r\n      sortable.sort(function(a, b) {\r\n        return b[1] - a[1];\r\n      });\r\n      var minFreq;\r\n      if (maxWords > sortable.length) {\r\n        minFreq = 1;\r\n      } else {\r\n        minFreq = sortable[maxWords][1];\r\n      }\r\n      sortable = sortable.slice(0, maxWords);\r\n      var count = 0;\r\n      for (const [word, freq] of sortable) {\r\n        var isBiggest = count == 0 ? true : false;\r\n        count++;\r\n        this.wordBoxes.push(new wordBox(word, freq, maxFreq, minFreq, \r\n          this.getProceduralColor(baseColor, colorMinOffset, colorMaxOffset), isBiggest));\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Main render function.\r\n     * - Renders individual word boxes\r\n     * - Renders individual boundaries\r\n     */\r\n    render() {\r\n      for (var i = 0; i < this.wordBoxes.length; i++) {\r\n        this.wordBoxes[i].render();\r\n      }\r\n      if (debug) {\r\n        for (var i = 0; i < this.boundaries.length; i++) {\r\n          this.boundaries[i].render();\r\n        }\r\n      }\r\n    }\r\n  \r\n    /**\r\n     * Handles collisions between wordBoxes by calling\r\n     * handleCollision() and move() on each wordBox\r\n     */\r\n    handleCollisions() {\r\n      for (var i = 0; i < this.wordBoxes.length; i++) {\r\n        for (var j = i; j < this.wordBoxes.length; j++) {\r\n          if (i == j) continue;\r\n          this.wordBoxes[i].handleCollision(this.wordBoxes[j]);\r\n        }\r\n      }\r\n      for (var i = 0; i < this.wordBoxes.length; i++) {\r\n        this.wordBoxes[i].move();\r\n      }\r\n    }\r\n  \r\n    /**\r\n     * Handles boundaries between boundaries by calling\r\n     * handleBoundary on individual boundaries.\r\n     */\r\n    handleBoundary() {\r\n      for (var i = 0; i < this.wordBoxes.length; i++) {\r\n        for (var j = 0; j < this.boundaries.length; j++) {\r\n          this.wordBoxes[i].handleBoundary(this.boundaries[j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Gets procedural color based on an initial value, min, and max\r\n     * @param {Color Base} colorBase - Color base value\r\n     * @param {Integer} min - Minimum offset from base value\r\n     * @param {Integer} max - Maximum offset from base value\r\n     * @return {P5 Color} - Color for wordBox\r\n     */ \r\n    getProceduralColor(colorBase, min, max) {\r\n      return p.color(this.procColorHelper(p.red(colorBase), min, max),\r\n                   this.procColorHelper(p.green(colorBase), min, max),\r\n                   this.procColorHelper(p.blue(colorBase), min, max))\r\n    }\r\n  \r\n    /**\r\n     * Helper function to randomly create a procedural color\r\n     * @param {Integer} val - Color base value\r\n     * @param {Integer} min - Minimum offset from base value\r\n     * @param {Integer} max - Maximum offset from base value\r\n     * @return {Integer} temp - Red, green, or blue integer value to be fed\r\n     * into P5.\r\n     */\r\n    procColorHelper(val, min, max) {\r\n      var temp = val + (Math.random() * ((max*2) - (min*2))) - max;\r\n      temp = Math.floor(temp <= 0 ? temp - min : temp + min);\r\n      return temp;\r\n    }\r\n  }\r\n  \r\n  class wordBox {\r\n    /**\r\n     * Creates an instance of a word box.\r\n     * - Passes all input parameters and binds to object\r\n     * - Creates instance of rectangle to contain the word\r\n     * @param {String} text - text to render\r\n     * @param {Integer} freq - frequency of the word\r\n     * @param {Integer} maxFreq - maximum of all frequencies in word dictionary\r\n     * @param {Integer} minFreq - minimum of all frequencies in word dictionary\r\n     * @param {P5 Color} color - color of the text\r\n     * @param {Boolean} isBiggest - boolean of whether the word is the biggest among all those in word dictionary\r\n     */\r\n    constructor(text, freq, maxFreq, minFreq, color, isBiggest) {\r\n      this.text = text;\r\n      this.isBiggest = isBiggest;\r\n      this.freq = freq;\r\n      this.maxFreq = maxFreq;\r\n      this.minFreq = minFreq;\r\n      this.fontSize = p.map((freq - minFreq)/(maxFreq - minFreq), 0, 1, minFontSize, fontSize);\r\n      p.textSize(this.fontSize);\r\n      var randX = Math.random() * spawnBoxSize - spawnBoxSize / 2;\r\n      var randY = Math.random() * spawnBoxSize - spawnBoxSize / 2;\r\n      this.rect = new Rectangle(p.width / 2 - p.textWidth(text) / 2 + randX, \r\n                    p.height / 2 + randY, \r\n                    p.textWidth(text), \r\n                    this.fontSize * scalar,\r\n                    isBiggest);\r\n      this.yOffset = this.fontSize * (1 - scalar);\r\n      this.color = color;\r\n    }\r\n  \r\n    /**\r\n     * Main render function for wordBox class.\r\n     * - Sets text size, fill, and actual text\r\n     * - If in debug mode, render the rectangle as well\r\n     */\r\n    render() {\r\n      p.textSize(this.fontSize);\r\n      p.fill(this.color);\r\n      p.text(this.text, this.rect.x, this.rect.y - this.yOffset);\r\n      if (debug) {\r\n        this.rect.render();\r\n      }\r\n    }\r\n    \r\n    /**\r\n     * Handles a collision for this wordBox.\r\n     * @param {wordBox} other - other wordBox that is colliding with this one\r\n     */\r\n    handleCollision(other) {\r\n      this.rect.handleCollision(other.rect);\r\n    }\r\n  \r\n    /**\r\n     * Moves a wordBox by moving its rectangle\r\n     */\r\n    move() {\r\n      this.rect.move();\r\n    }\r\n  \r\n    /**\r\n     * Handle a wordBox collision with a boundary\r\n     * @param {Boundary} bound - boundary that is colliding with wordBox\r\n     */\r\n    handleBoundary(bound) {\r\n      this.rect.handleCollision(bound);\r\n    }\r\n  }\r\n  \r\n  class Rectangle {\r\n    /**\r\n     * Creates an instance of a Rectangle to contain wordBox\r\n     * @param {Integer} x - Left x offset\r\n     * @param {Integer} y - Top y offset\r\n     * @param {Integer} w - Width of rectangle\r\n     * @param {Integer} h - Height of rectangle\r\n     * @param {Boolean} isBiggest - Whether or not this rectangle is biggest of all\r\n     */\r\n    constructor(x,y,w,h,isBiggest) {\r\n      this.x = x;\r\n      this.y = y;\r\n      this.w = w;\r\n      this.h = h;\r\n      this.midX = x + w / 2;\r\n      this.midY = y + h / 2;\r\n      this.vx = 0;\r\n      this.vy = 0;\r\n      this.isBiggest = isBiggest\r\n    }\r\n  \r\n    /**\r\n     * Helper function to calculate area of rectangle\r\n     */\r\n    area() {\r\n      return this.w * this.h;\r\n    }\r\n  \r\n    /**\r\n     * Main render function to render a Rectangle instance\r\n     */\r\n    render() {\r\n      p.rect(this.x, this.y, this.w, this.h);\r\n    }\r\n  \r\n    /**\r\n     * Handles a collision with another rectangle\r\n     * - Collision algorithm is based on spring force\r\n     * - Sets delta x and delta y (how much to move)\r\n     * - Sets velocities of this and other rectangle\r\n     * @param {Recangle} other - other rectangle this rectangle is colliding with\r\n     */\r\n    handleCollision(other) {\r\n      if (!this.collides(other)) {\r\n        return\r\n      }\r\n\r\n      var spring = 0.5;\r\n      var force = 800000;\r\n      var sizeScale = 0.3;\r\n      var biggestScale = this.isBiggest == true ? 1/50000 : 1;\r\n\r\n      var dx = this.midX - other.midX,\r\n          dy = this.midY - other.midY;\r\n      var threshold = 1.0;\r\n      if (dx < threshold && dx >= 0) {\r\n        dx = threshold;\r\n      } else if (dx > -threshold && dx <= 0) {\r\n        dx = -threshold;\r\n      }\r\n      if (dy < threshold && dy >= 0) {\r\n        dy = threshold;\r\n      } else if (dy > -threshold && dy <= 0) {\r\n        dy = -threshold;\r\n      }\r\n  \r\n      // var constvx = force * spring * dx / distance / distance,\r\n      // \tconstvy = force * spring * dy / distance / distance;\r\n      var constvx = force * spring / dx, // Math.abs(dx),\r\n        constvy = force * spring / dy; // Math.abs(dy);\r\n  \r\n      var areaScale1 = p.pow(this.area(), sizeScale);\r\n      var areaScale2 = p.pow(other.area(), sizeScale);\r\n  \r\n      var max = 1;\r\n      this.vx += clampAbs(constvx / areaScale1 * biggestScale, max);\r\n      this.vy += clampAbs(constvy / areaScale1 * biggestScale, max);\r\n      other.vx -= clampAbs(constvx / areaScale2, max);\r\n      other.vy -= clampAbs(constvy / areaScale2, max);\r\n    }\r\n  \r\n    /**\r\n     * Adds an arbitrary inward force for aesthetic reasons (word cloud attraction toward center)\r\n     * - Adjusts velocity towards center based on constant force strength\r\n     */\r\n    addInwardsForce() {\r\n      var forceStrength = 0.0001;\r\n      var centerX = p.width / 2;\r\n      var centerY = p.height / 2;\r\n      var fX = centerX - this.midX;\r\n      var fY = centerY - this.midY;\r\n      this.vx += fX * forceStrength;\r\n      this.vy += fY * forceStrength;\r\n    }\r\n  \r\n    /**\r\n     * Main function to move a rectangle when a user drags the rectangle.\r\n     * - Resets position (x, y, midX, midY) based on velocities\r\n     * - Resets velocities based on drag\r\n     */\r\n    move() {\r\n      // this.addInwardsForce();\r\n      var drag = 0.4;\r\n      this.x += this.vx;\r\n      this.y += this.vy;\r\n      this.midX = this.x + this.w / 2;\r\n      this.midY = this.y + this.h / 2;\r\n      this.vx = this.vx * drag;\r\n      this.vy = this.vx * drag;\r\n    }\r\n  \r\n    /**\r\n     * Helper function to check if other rectangle collides with this one\r\n     * @param {Recangle} other - other rectangle to check agains\r\n     * @return {Boolean} - whether or not other rectangle collides with this one\r\n     */\r\n    collides(other) {\r\n      if (this.x < other.x + other.w && this.x + this.w > other.x &&\r\n            this.y < other.y + other.h && this.y + this.h > other.y) {\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    /**\r\n     * Helper function to check if input x and y is in rectangle\r\n     * @param {Integer} x - x value to check in rectangle\r\n     * @param {Integer} y - y value to check in rectangle\r\n     * @return {Boolean} - whether or not x, y pair in rectangle\r\n     */\r\n    contains(x, y) {\r\n      if (x > this.x && x < this.x + this.w &&\r\n          y > this.y && y < this.y + this.h) {\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  class InputHandler {\r\n    /**\r\n     * Creates an instance of InputHandler by initializing state/\r\n     * @param {Array<wordBox>} wordBoxes - array of word boxes user can click on\r\n     */\r\n    constructor(wordBoxes) {\r\n      this.wordBoxes = wordBoxes;\r\n      this.attachedBox = null;\r\n      this.xOffset = 0;\r\n      this.yOffset = 0;\r\n      this.clickX = 0;\r\n      this.clickY = 0;\r\n      this.isPressed = false;\r\n      this.clickThreshold = 2;\r\n    }\r\n  \r\n    /**\r\n     * Handles a mouse press event\r\n     * - Finds wordBox user may have clicked on\r\n     * - Resets x and y if the click event is within the box\r\n     */\r\n    mousePressed() {\r\n      for (var i = 0; i < this.wordBoxes.length; i++) {\r\n        if (this.wordBoxes[i].rect.contains(p.mouseX, p.mouseY)) {\r\n          this.attachedBox = this.wordBoxes[i];\r\n          this.xOffset = p.mouseX - this.wordBoxes[i].rect.x;\r\n          this.yOffset = p.mouseY - this.wordBoxes[i].rect.y;\r\n        }\r\n      }\r\n      this.isPressed = true;\r\n      this.clickX = p.mouseX;\r\n      this.clickY = p.mouseY;\r\n    }\r\n  \r\n    /**\r\n     * Handles a mouse release event\r\n     * - Calls mouseClicked() if the click event is within the threshold\r\n     */\r\n    mouseReleased() {\r\n      if (this.clickX - p.mouseX < this.clickThreshold && this.clickX - p.mouseX > -this.clickThreshold &&\r\n          this.clickY - p.mouseY < this.clickThreshold && this.clickY - p.mouseY > -this.clickThreshold) {\r\n        this.mouseClicked();\r\n      }\r\n      this.attachedBox = null;\r\n      this.isPressed = false;\r\n    }\r\n  \r\n    /**\r\n     * Handles a mouse click event\r\n     * - Update the sentiment chart based on the text the user clicked on\r\n     */\r\n    mouseClicked() {\r\n      if (this.attachedBox != null) {\r\n        this.updateSentimentChart();\r\n      }\r\n    }\r\n  \r\n    /**\r\n     * Handles the attached box. This function is called in main render() function\r\n     * - Adjust the attached box based on x and y offsets\r\n     */\r\n    handleAttachedBox() {\r\n      if (this.attachedBox == null) {\r\n        return;\r\n      }\r\n      this.attachedBox.rect.x = p.mouseX - this.xOffset;\r\n      this.attachedBox.rect.y = p.mouseY - this.yOffset;\r\n    }\r\n  \r\n    /**\r\n     * Updates the sentiment chart by dispatching an event to parent App.\r\n     * - Extract relevant text\r\n     * - Creates a new event object\r\n     * - Dispatches event object with relevant text set as value\r\n     */\r\n    updateSentimentChart() {\r\n      var val;\r\n      if (this.attachedBox == null) {\r\n        val = \"\";\r\n      } else {\r\n        val = this.attachedBox.text;\r\n      }\r\n\r\n      var input = document.getElementById(\"canvasForm\");\r\n      var nativeInputValueSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, \"value\").set;\r\n      nativeInputValueSetter.call(input, val);\r\n      var ev = new Event('input', { bubbles: true});\r\n      input.dispatchEvent(ev);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Sets up canvas.\r\n   * - Initializes canvas size, text size, text alignment, options for a color base\r\n   * - Creates instance of wordCloud class using word frequency dictionary\r\n   * - Creates instance of InputHandler class using wordBoxes\r\n   */\r\n  p.setup = () => {\r\n    p.createCanvas(720, 400);\r\n    p.textSize(fontSize);\r\n    p.textAlign(p.LEFT, p.TOP);\r\n    p.textLeading(0);\r\n    colorBaseOptions = [\r\n      p.color(0, 51, 204),\r\n      p.color(51, 204, 51),\r\n      p.color(255, 153, 51),\r\n      p.color(153, 51, 255),\r\n      p.color(51, 204, 204)\r\n    ];\r\n    cloud = new wordCloud(props.dict);\r\n    //make sure to initialize inputHandler after wordCloud, should refactor this\r\n    ih = new InputHandler(cloud.wordBoxes);\r\n  }\r\n  \r\n  \r\n  /*\r\n   * Main draw function.\r\n   * - Sets background for canvas\r\n   * - Calls handleBoundary() and handleCollisions() on cloud instance\r\n   * - Calls handleAttachedBox() on InputHandler instance\r\n   * - Renders the cloud\r\n   */\r\n  p.draw = () => {\r\n    if (debug) {\r\n      p.noFill();\r\n      p.stroke(255, 128, 0);\r\n    } else {\r\n  \r\n    }\r\n    p.background(255);\r\n  \r\n    cloud.handleBoundary();\r\n    cloud.handleCollisions();\r\n    ih.handleAttachedBox();\r\n    cloud.render();\r\n  }\r\n  \r\n  /**\r\n   * Helper function to clamp value below a maximum value\r\n   * @param {Integer} val - value to clamp\r\n   * @param {Integer} max - maximum value val can be\r\n   */ \r\n  function clampAbs(val, max) {\r\n    var sign = (val < 0) ? -1 : 1;\r\n    var temp = (val < 0) ? -val : val;\r\n    if (temp > max) {\r\n      return sign * max;\r\n    } else {\r\n      return val;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Handle mouse press by calling mousePressed() on the instance of InputHandler\r\n   */\r\n  p.mousePressed = () => {\r\n    ih.mousePressed();\r\n  }\r\n  \r\n  /**\r\n   * Handle mouse release by calling mouseReleased() on the instance of InputHandler\r\n   */\r\n  p.mouseReleased = () => {\r\n    ih.mouseReleased();\r\n  }\r\n}\r\n\r\nexport default sketch;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport {Bar} from 'react-chartjs-2';\r\n\r\n/**\r\n * ChartContainer - Component responsible for generating the sentiment analysis bar graph associated with each word on the word cloud.\r\n * Gets props passed down from App Component: word, ts, vote, s.\r\n */\r\nclass ChartContainer extends Component {\r\n  constructor(props){\r\n    super();\r\n  }\r\n\r\n  static defaultProps = {\r\n    displayTitle:true,\r\n    displayLegend: true,\r\n    legendPosition:'right',\r\n    word:'none'\r\n  }\r\n\r\n  /**\r\n   * RANGE CALCULATION: takes timeframe given by user's query and divides into 10 equal time ranges.\r\n   * @param {List} time - all the timestamps for when a word was commented\r\n   * @return {List} ranges - timestamp ranges evenly divided into 10 ranges.\r\n   */\r\n\r\n  getRanges(time){\r\n    var i;\r\n\r\n    var beg = time[0];\r\n    var end = time[time.length-1];\r\n    var totalRange = end - beg;\r\n\r\n    //round to nearest value divisible by 10 to get equal ranges\r\n    if((totalRange % 10) !== 0){\r\n      totalRange += (10-(totalRange%10));\r\n    }\r\n\r\n    var ranges = [];\r\n    ranges.length = 11;\r\n\r\n    ranges[0] = beg;\r\n    for(i = 1; i < ranges.length; i++){\r\n      ranges[i] = ranges[i-1] + (totalRange/10);\r\n    }\r\n\r\n    return ranges;\r\n  }\r\n\r\n  /**\r\n   * FREQUENCY AND SENTIMENT CALCULATION: iterates through all the timestamps associated with the word, and calculates two things--\r\n   * (1) number of time it appears within each time range; (2) average sentiment value for the word within each time range\r\n   * @param {List} time - all the timestamps for when a word was commented\r\n   * @param {List} votes - the number of up or downvotes the comment with the word at the time\r\n   * @param {List} sentiments - the sentiment value (ranging from -1 to 1) generated for the comment with the word\r\n   * @return {List} ans - an array holding two arrays-- (1) results for frequency; (2) results for average sentiments\r\n   * @this {ChartContainer}\r\n   */\r\n\r\n  getFrequencyandSentiment(time, votes, sentiments){\r\n      var i;\r\n\r\n      var ranges = this.getRanges(time);\r\n      var freq = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n      var calcSent = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; //hold final calculations for sentiment values to be displayed\r\n\r\n\r\n      /**\r\n       * helper function sorting out which timestamp falls within which range, and calculates frequency and sentiment values respectively.\r\n       * @param {List} ranges - all the timestamps for when a word was commented\r\n       * @param {Number} t - time for when a word was commented\r\n       * @param {Number} v - the number of up or downvotes the comment with the word\r\n       * @param {Number} sc - the sentiment value (ranging from -1 to 1) generated for the comment with the word\r\n       */\r\n\r\n      function divideSegments(ranges, t, v, sc){\r\n        if(t >= ranges[0] && t < ranges[1]){\r\n          freq[0]++;\r\n          calcSent[0] += (sc*v)/Math.abs(v);\r\n        }\r\n        else if(t >= ranges[1] && t < ranges[2]){\r\n          freq[1]++;\r\n          calcSent[1] += (sc*v)/Math.abs(v);\r\n        }\r\n        else if(t >= ranges[2] && t < ranges[3]){\r\n          freq[2]++;\r\n          calcSent[2] += (sc*v)/Math.abs(v);\r\n        }\r\n        else if(t >= ranges[3] && t < ranges[4]){\r\n          freq[3]++;\r\n          calcSent[3] += (sc*v)/Math.abs(v);\r\n        }\r\n        else if(t >= ranges[4] && t < ranges[5]){\r\n          freq[4]++;\r\n          calcSent[4] += (sc*v)/Math.abs(v);\r\n        }\r\n        else if(t >= ranges[5] && t < ranges[6]){\r\n          freq[5]++;\r\n          calcSent[5] += (sc*v)/Math.abs(v);\r\n        }\r\n        else if(t >= ranges[6] && t < ranges[7]){\r\n          freq[6]++;\r\n          calcSent[6] += (sc*v)/Math.abs(v);\r\n        }\r\n        else if(t >= ranges[7] && t < ranges[8]){\r\n          freq[7]++;\r\n          calcSent[7] += (sc*v)/Math.abs(v);\r\n        }\r\n        else if(t >= ranges[8] && t < ranges[9]){\r\n          freq[8]++;\r\n          calcSent[8] += (sc*v)/Math.abs(v);\r\n        }\r\n        else if(t >= ranges[9] && t <= ranges[10]){\r\n          freq[9]++;\r\n          calcSent[9] += (sc*v)/Math.abs(v);\r\n        }\r\n\r\n      }\r\n\r\n      for(i = 0; i < time.length; i++){\r\n        divideSegments(ranges, time[i], votes[i], sentiments[i]);\r\n      }\r\n\r\n      //average out all the summed sentiments per range\r\n      for(i = 0; i < calcSent.length; i++){\r\n        calcSent[i] /= freq[i];\r\n      }\r\n\r\n      var ans = [freq, calcSent];\r\n      return ans;\r\n  }\r\n\r\n  /**\r\n   * DATE FORMATTING: converts UNIX timestamp into readable date format\r\n   * @param {List} time - all the timestamps for when a word was commented\r\n   * @return {List} convertedRange - reformatted time ranges\r\n   * @this {ChartContainer}\r\n   */\r\n\r\n  getDate(time){\r\n    var i;\r\n    var ranges = this.getRanges(time);\r\n\r\n    /**\r\n     * helper function to breakdown and reformat UNIX timestamp\r\n     * @param {Number} unix - =timestamp value\r\n     * @return {String} date - reformatted date\r\n     */\r\n\r\n    function tsConvert(unix){\r\n      var input = new Date(unix * 1000);\r\n      var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\r\n      var year = input.getFullYear();\r\n      var month = months[input.getMonth()];\r\n      var date = input.getDate();\r\n      var hour = input.getHours();\r\n      var min = input.getMinutes();\r\n      var sec = input.getSeconds();\r\n\r\n      if(sec < 10){\r\n        sec = '0' + sec;\r\n      }\r\n\r\n      var date = month + ' ' + date + ', ' + year + ' ' + hour + ':' + min;\r\n      return date;\r\n    }\r\n\r\n    var convertedRange = [];\r\n    convertedRange.length = ranges.length;\r\n\r\n    for(i = 0; i < ranges.length; i++){\r\n      convertedRange[i] = tsConvert(ranges[i]);\r\n    }\r\n\r\n    return convertedRange.slice(0,10);\r\n  }\r\n\r\n  /**\r\n   * SENTIMENT COLOR ASSIGNMENT: assigns sentiment value for each time range to a color\r\n   * @return {List} colors - holds rgba values for each sentiment in a time range\r\n   * @this {ChartContainer}\r\n   */\r\n\r\n  getColors(){\r\n    var i;\r\n    var calcSent = this.getFrequencyandSentiment(this.props.ts, this.props.vote, this.props.s)[1];\r\n\r\n    var colors = [];\r\n    colors.length = calcSent.length;\r\n\r\n    /**\r\n     * helper function to assign colors for each sentiment range\r\n     * @param {Number} sent - sentiment value\r\n     */\r\n\r\n    function sentColor(sent){\r\n      if(sent <= -0.9){\r\n        return \"rgba(45, 6, 6, 1)\";\r\n      }\r\n      else if(sent > -0.9 && sent <= -0.8){\r\n        return \"rgba(62, 8, 8, 1)\";\r\n      }\r\n      else if(sent > -0.8 && sent <= -0.7){\r\n          return \"rgba(92, 10, 10, 1)\";\r\n      }\r\n      else if(sent > -0.7 && sent <= -0.6){\r\n        return \"rgba(112, 15, 15, 1)\";\r\n      }\r\n      else if(sent > -0.6 && sent <= -0.5){\r\n        return \"rgba(135, 18, 18, 1)\";\r\n      }\r\n      else if(sent > -0.5 && sent <= -0.4){\r\n          return \"rgba(157, 21, 21, 1)\";\r\n      }\r\n      else if(sent > -0.4 && sent <= -0.3){\r\n        return \"rgba(180, 24, 24, 1)\";\r\n      }\r\n      else if(sent > -0.3 && sent <= -0.2){\r\n          return \"rgba(202, 28, 28, 1)\";\r\n      }\r\n      else if(sent > -0.2 && sent <= -0.1){\r\n        return \"rgba(224, 31, 31, 1)\";\r\n      }\r\n      else if(sent > -0.1 && sent <= 0){\r\n          return \"rgba(234, 98, 98, 1)\";\r\n      }\r\n      else if(sent > 0 && sent <= 0.1){\r\n        return \"rgba(56, 132, 18, 1)\";\r\n      }\r\n      else if(sent > 0.1 && sent <= 0.2){\r\n          return \"rgba(171, 251, 132, 1)\";\r\n      }\r\n      else if(sent > 0.2 && sent <= 0.3){\r\n        return \"rgba(105, 247, 34, 1)\";\r\n      }\r\n      else if(sent > 0.3 && sent <= 0.4){\r\n          return \"rgba(79, 221, 8, 1)\";\r\n      }\r\n      else if(sent > 0.4 && sent <= 0.5){\r\n        return \"rgba(70, 197, 7, 1)\";\r\n      }\r\n      else if(sent > 0.5 && sent <= 0.6){\r\n          return \"rgba(62, 172, 6, 1)\";\r\n      }\r\n      else if(sent > 0.6 && sent <= 0.7){\r\n        return \"rgba(44, 124, 4, 1)\";\r\n      }\r\n      else if(sent > 0.7 && sent <= 0.8){\r\n          return \"rgba(35, 99, 3, 1)\";\r\n      }\r\n\r\n      else if(sent > 0.8 && sent <= 0.9){\r\n          return \"rgba(26, 75, 2, 1)\";\r\n      }\r\n      else if(sent > 0.9 && sent <= 1){\r\n        return \"rgba(17, 50, 1, 1)\";\r\n      }\r\n    }\r\n\r\n    for(i = 0; i < calcSent.length; i++){\r\n      colors[i] = sentColor(calcSent[i]);\r\n    }\r\n\r\n    return colors;\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"chart\">\r\n          <Bar\r\n            data={{\r\n              labels: this.getDate(this.props.ts),\r\n              datasets:[\r\n                {\r\n                  label: this.props.word,\r\n                  data:this.getFrequencyandSentiment(this.props.ts, this.props.vote, this.props.s)[0],\r\n                  backgroundColor: this.getColors(),\r\n\r\n                }\r\n              ]\r\n            }}\r\n            options={{\r\n              title:{\r\n                display:this.props.displayTitle,\r\n                text: this.props.word,\r\n                fontSize:25\r\n              },\r\n              legend:{\r\n                display:this.props.displayLegend,\r\n                position:this.props.legendPosition\r\n              },\r\n              scales :{\r\n                xAxes: [{\r\n                  barPercentage: 1,\r\n                  categoryPercentage: 1\r\n              }]\r\n            }\r\n            }}\r\n          />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChartContainer;\r\n","import React, { Component } from 'react';\r\nimport p5 from 'p5';\r\n\r\nclass P5Wrapper extends Component {\r\n    /**\r\n     * Creates canvas by extracting from props\r\n     */ \r\n    componentDidMount() {\r\n      const { sketch, ...rest } = this.props;\r\n      this.canvas = new p5(sketch(rest), this.wrapper);\r\n    }\r\n  \r\n    /**\r\n     * Recreates canvas by removing old canvas and instantiates a new one.\r\n     * Only recreate canvas if props change.\r\n     */ \r\n    componentWillReceiveProps(newProps) {\r\n      const { sketch, ...rest } = newProps;\r\n      if (this.props.dict !== newProps.dict) {\r\n        this.canvas.remove();\r\n        this.canvas = new p5(newProps.sketch(rest), this.wrapper);\r\n      }\r\n  \r\n      if (typeof this.canvas.onNewProps === \"function\") {\r\n        this.canvas.onNewProps(newProps);\r\n      }\r\n    }\r\n  \r\n    /**\r\n     * Removes canvas when class unmounts.\r\n     */ \r\n    componentWillUnmount() {\r\n      this.canvas.remove();\r\n    }\r\n  \r\n    /**\r\n     * Main render function. Creates a reference to P5Wrapper.\r\n     */\r\n    render() {\r\n      return <div ref={(wrapper) => this.wrapper = wrapper} />;\r\n    }\r\n  }\r\n\r\nexport default P5Wrapper;\r\n","import React, { Component } from 'react';\r\nimport DatePicker from \"react-datepicker\";\r\nimport sketch from './sketch';\r\nimport ChartContainer from './ChartContainer';\r\nimport P5Wrapper from './P5Wrapper';\r\nimport { \r\n  Button, \r\n  Form, \r\n  FormGroup, \r\n  Input, \r\n  InputGroup, \r\n  InputGroupAddon, \r\n  InputGroupText \r\n} from 'reactstrap';\r\n\r\n\r\nimport './App.css';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nconst axios = require('axios');\r\n\r\nclass App extends Component {\r\n  /**\r\n   * Creates an instance of redditcloud application by initializing the state.\r\n   * All elements of the state are empty, except the word cloud initially has a title\r\n   * consisting of the application name, class, and creators of the application.\r\n   * @constructor\r\n   */\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      subreddit: \"\",\r\n      startDate: new Date(),\r\n      endDate: new Date(),\r\n      dateRange: [new Date(), new Date()],\r\n      word: \"\",\r\n      frequencies: {\r\n        \"RedditCloud\": 25,\r\n        \"CS130\": 15,\r\n        \"Kelvin Zhang\": 5,\r\n        \"Karen Zhang\": 5,\r\n        \"Vishaal Agartha\": 5,\r\n        \"CJ Ordog\": 5,\r\n        \"Anav Sanghvi\": 5,\r\n        \"Albert Pan\": 5\r\n      },\r\n      sentiments: {}\r\n    };\r\n\r\n    this.onChangeSubreddit = this.onChangeSubreddit.bind(this);\r\n    this.onChangeStartDate = this.onChangeStartDate.bind(this);\r\n    this.onChangeEndDate = this.onChangeEndDate.bind(this);\r\n    this.onChangeSentimentChart = this.onChangeSentimentChart.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Changes state to new subreddit\r\n   * @param {Event} e - Contains the event with new subreddit name\r\n   */\r\n  onChangeSubreddit = (e) => {\r\n    this.setState({ subreddit: e.target.value });\r\n  }\r\n\r\n  /**\r\n   * Changes state to new start date\r\n   * @param {Date} date - Contains the date with new start date\r\n   */\r\n  onChangeStartDate = (date) => {\r\n    this.setState({ startDate: date });\r\n  }\r\n\r\n  /**\r\n   * Changes state to new end date\r\n   * @param {Date} date - Contains the date with new end date\r\n   */\r\n  onChangeEndDate = (date) => {\r\n    this.setState({ endDate: date });\r\n  }\r\n\r\n  /**\r\n   * Changes state to new word to be passed down to SentimentChart\r\n   * @param {Event} e - Contains the event with new word to analyze\r\n   */\r\n  onChangeSentimentChart = (e) => {\r\n    this.setState({ word: e.target.value });\r\n  }\r\n\r\n  /**\r\n   * Handles submission of form. Formats data and triggers an HTTP request\r\n   * to backend to obtain data for a certain word. Extracts sentiments and frequencies\r\n   * and assigns it to the state\r\n   * @param {Event} - Contains the submit event\r\n   */\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    \r\n    // Data consists of a subreddit of type String, start and end dates of type Integer\r\n    // (in Unix Timestamp format)\r\n    let data = JSON.stringify({\r\n      subreddit: this.state.subreddit,\r\n      start: parseInt((this.state.startDate.getTime() / 1000).toFixed(0)),\r\n      end: parseInt((this.state.endDate.getTime() / 1000).toFixed(0))\r\n    })\r\n\r\n    axios.post('http://127.0.0.1:8080', data, {\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=UTF-8',\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n      },\r\n      timeout: 60000\r\n    })\r\n    .then((res) => res.data)\r\n    .then((data) => {\r\n      // Extract data\r\n      var sentiments = Object.assign({}, ...data.map(({word, timestamps, score, vote}) => ({[word]: {timestamps, score, vote}})));\r\n      var frequencies = data.reduce((map, obj) => (map[obj.word] = obj.frequency, map), {});\r\n\r\n      this.setState({\r\n        sentiments: sentiments,\r\n        frequencies: frequencies\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Main render function.\r\n   * - Contains P5Wrapper for WordCloud\r\n   * - Contains ChartContainer for SentimentChart\r\n   * - Handles form submission consisting of a subreddit name, start, and end dates\r\n   */\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <P5Wrapper sketch={sketch} dict={this.state.frequencies}/>\r\n          <Form onSubmit={this.onSubmit}>\r\n            <InputGroup size=\"sm\">\r\n              <InputGroupAddon addonType=\"prepend\">\r\n                <InputGroupText>r/ </InputGroupText>\r\n              </InputGroupAddon>\r\n              <Input \r\n                value={this.state.subreddit} \r\n                onChange={this.onChangeSubreddit} \r\n                placeholder={\"computerscience\"}\r\n                id=\"subreddit\"\r\n              />\r\n            </InputGroup>\r\n            <FormGroup>\r\n              <DatePicker\r\n                selected={this.state.startDate}\r\n                onChange={this.onChangeStartDate}\r\n                showTimeSelect\r\n                timeFormat=\"HH:mm\"\r\n                timeIntervals={10}\r\n                dateFormat=\"MM/d/yyyy h:mm aa\"\r\n              />\r\n              <DatePicker\r\n                selected={this.state.endDate}\r\n                onChange={this.onChangeEndDate}\r\n                showTimeSelect\r\n                timeFormat=\"HH:mm\"\r\n                timeIntervals={10}\r\n                dateFormat=\"MM/d/yyyy h:mm aa\"\r\n              />\r\n            </FormGroup>\r\n            <Button type=\"submit\" outline color=\"primary\" size=\"sm\">Cloudify</Button>\r\n          </Form>\r\n        <input style={{display:\"none\"}} id=\"canvasForm\" value=\"\" onChange={this.onChangeSentimentChart}/>\r\n        {typeof(this.state.sentiments[this.state.word]) !== \"undefined\" &&\r\n          <ChartContainer \r\n            word={this.state.word} \r\n            ts={this.state.sentiments[this.state.word].timestamps} \r\n            vote={this.state.sentiments[this.state.word].vote} \r\n            s={this.state.sentiments[this.state.word].score}\r\n          />\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}